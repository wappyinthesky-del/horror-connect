import { Hono } from 'hono'
import { renderer } from './renderer'
import { getCookie, setCookie } from 'hono/cookie'
import { serveStatic } from 'hono/cloudflare-workers'
import { cors } from 'hono/cors'

// Environment-aware cookie helper
const isProduction = (c: any) => {
  const url = new URL(c.req.url)
  return url.protocol === 'https:' || url.hostname.includes('.pages.dev')
}

const setSecureCookie = (c: any, name: string, value: string, options: any = {}) => {
  const isProd = isProduction(c)
  setCookie(c, name, value, {
    ...options,
    secure: isProd,
    sameSite: isProd ? 'None' : 'Lax'
  })
}

const app = new Hono()

// Favicon handler
app.get('/favicon.ico', (c) => {
  return c.text('üëª', 200, { 'Content-Type': 'text/plain' })
})

// Enhanced static file serving for ORB prevention
app.use('/static/*', async (c, next) => {
  // Set essential headers for same-origin requests
  c.header('Cache-Control', 'public, max-age=31536000')
  
  // Determine MIME type from file extension
  const path = c.req.path
  if (path.endsWith('.js')) {
    c.header('Content-Type', 'text/javascript; charset=utf-8')
  } else if (path.endsWith('.css')) {
    c.header('Content-Type', 'text/css; charset=utf-8')
  }
  
  await next()
})

// Static file serving with enhanced ORB prevention
app.use('/static/*', serveStatic({ 
  root: './public',
  onNotFound: (path, c) => {
    return c.text('File not found', 404)
  }
}))

// Root level static files (for HTML test pages)
app.use('/*.html', serveStatic({ 
  root: './public',
  onNotFound: (path, c) => {
    return c.text('File not found', 404)
  }
}))

// Static files must be served before renderer middleware
app.use(renderer)

// Password protection middleware
const passwordProtection = async (c: any, next: any) => {
  const isAuthenticated = getCookie(c, 'horror_auth')
  if (isAuthenticated === 'authenticated') {
    await next()
  } else {
    return c.redirect('/welcome')
  }
}

// [REMOVED] Direct login endpoint - security risk

// Feed test page
app.get('/feed-test', (c) => {
  return c.html(`<!DOCTYPE html>
<html>
<head>
    <title>Feed Test - HorrorConnect</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 p-8">
    <div class="max-w-4xl mx-auto bg-white p-6 rounded-lg shadow">
        <h1 class="text-2xl font-bold mb-4">Feed Loading Test</h1>
        
        <div class="mb-4">
            <button onclick="setAuthCookies()" class="bg-blue-500 text-white px-4 py-2 rounded mr-2">Set Auth Cookies</button>
            <button onclick="testFeedAPI()" class="bg-green-500 text-white px-4 py-2 rounded mr-2">Test Feed API</button>
            <button onclick="initFeedManager()" class="bg-yellow-500 text-white px-4 py-2 rounded mr-2">Init Feed Manager</button>
            <button onclick="clearLog()" class="bg-red-500 text-white px-4 py-2 rounded">Clear Log</button>
        </div>
        
        <div class="mb-4">
            <h3 class="text-lg font-semibold mb-2">Feed Container:</h3>
            <div id="feed-posts" class="border p-4 min-h-32 bg-gray-50">
                <div class="loading-placeholder">„Éï„Ç£„Éº„Éâ„ÇíË™≠„ÅøËæº„Åø‰∏≠...</div>
            </div>
        </div>
        
        <div id="log" class="bg-gray-800 text-green-400 p-4 rounded h-96 overflow-y-auto font-mono text-sm"></div>
    </div>
    
    <script>
        function log(message) {
            const logDiv = document.getElementById('log');
            const timestamp = new Date().toLocaleTimeString();
            logDiv.innerHTML += '[' + timestamp + '] ' + message + '\\n';
            logDiv.scrollTop = logDiv.scrollHeight;
        }
        
        function clearLog() {
            document.getElementById('log').innerHTML = '';
        }
        
        function setAuthCookies() {
            document.cookie = 'horror_auth=authenticated; path=/; max-age=86400; secure; samesite=none';
            document.cookie = 'current_user=admin; path=/; max-age=86400; secure; samesite=none';
            log('Cookies set via JavaScript');
            log('Current cookies: ' + document.cookie);
        }
        
        async function testFeedAPI() {
            try {
                log('Testing feed API...');
                const response = await fetch('/api/feed', {
                    credentials: 'same-origin',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                });
                
                log('Feed API status: ' + response.status);
                
                if (response.ok) {
                    const data = await response.json();
                    log('Feed data received: ' + data.posts.length + ' posts');
                    log('First post: ' + JSON.stringify(data.posts[0]));
                    
                    // Display posts in the container
                    const container = document.getElementById('feed-posts');
                    if (data.posts.length > 0) {
                        const postsHtml = data.posts.map(post => 
                            '<div class="border-b p-2"><strong>' + post.displayName + ':</strong> ' + post.content + '</div>'
                        ).join('');
                        container.innerHTML = postsHtml;
                    } else {
                        container.innerHTML = '<div>No posts found</div>';
                    }
                } else {
                    const text = await response.text();
                    log('Feed API error: ' + text);
                }
            } catch (error) {
                log('Feed API error: ' + error.message);
            }
        }
        
        function initFeedManager() {
            log('Initializing FeedManager manually...');
            
            // Simple FeedManager simulation
            const feedManager = {
                feedPostsContainer: document.getElementById('feed-posts'),
                currentUser: {userid: 'admin', displayName: 'ÁÆ°ÁêÜËÄÖ'},
                posts: [],
                
                async loadFeed() {
                    log('FeedManager: Loading feed...');
                    try {
                        const response = await fetch('/api/feed', {
                            credentials: 'same-origin',
                            headers: {
                                'Accept': 'application/json',
                                'Content-Type': 'application/json'
                            }
                        });
                        
                        if (response.ok) {
                            const data = await response.json();
                            this.posts = data.posts || [];
                            log('FeedManager: ' + this.posts.length + ' posts loaded');
                            this.renderFeed();
                        } else {
                            throw new Error('HTTP ' + response.status);
                        }
                    } catch (error) {
                        log('FeedManager error: ' + error.message);
                    }
                },
                
                renderFeed() {
                    if (!this.feedPostsContainer) return;
                    log('FeedManager: Rendering ' + this.posts.length + ' posts');
                    
                    if (this.posts.length === 0) {
                        this.feedPostsContainer.innerHTML = '<div>No posts available</div>';
                        return;
                    }
                    
                    const postsHtml = this.posts.map(post => {
                        return '<div class="feed-post border-b p-3">' +
                               '<div class="font-semibold">' + post.displayName + '</div>' +
                               '<div class="mt-1">' + post.content + '</div>' +
                               '<div class="text-sm text-gray-500 mt-2">' + new Date(post.timestamp).toLocaleString() + '</div>' +
                               '</div>';
                    }).join('');
                    
                    this.feedPostsContainer.innerHTML = postsHtml;
                    log('FeedManager: Render completed');
                }
            };
            
            window.testFeedManager = feedManager;
            feedManager.loadFeed();
        }
        
        // Auto-run on page load
        window.onload = function() {
            log('Feed Test Page Loaded');
            log('Current cookies: ' + document.cookie);
        };
    </script>
</body>
</html>`)
})

// Simple admin login test page
app.get('/admin-login', (c) => {
  return c.html(`
    <!DOCTYPE html>
    <html>
    <head>
        <title>Admin Login - HorrorConnect</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <script src="https://cdn.tailwindcss.com"></script>
    </head>
    <body class="bg-gray-100 min-h-screen flex items-center justify-center">
        <div class="bg-white p-8 rounded-lg shadow-md w-full max-w-md">
            <h1 class="text-2xl font-bold mb-6 text-center">ÁÆ°ÁêÜËÄÖ„É≠„Ç∞„Ç§„É≥</h1>
            
            <form action="/welcome-login" method="POST" class="space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">„É¶„Éº„Ç∂„ÉºID</label>
                    <input 
                        type="text" 
                        name="userid" 
                        value="admin"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        required
                    />
                </div>
                
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">„Éë„Çπ„ÉØ„Éº„Éâ</label>
                    <input 
                        type="password" 
                        name="password" 
                        value="19861225"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        required
                    />
                </div>
                
                <button 
                    type="submit" 
                    class="w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                    ÁÆ°ÁêÜËÄÖ„É≠„Ç∞„Ç§„É≥
                </button>
            </form>
            
            <div class="mt-6 text-center">
                <a href="/welcome" class="text-sm text-blue-500 hover:underline">
                    ÈÄöÂ∏∏„É≠„Ç∞„Ç§„É≥„ÅØ„Åì„Å°„Çâ
                </a>
            </div>
        </div>
    </body>
    </html>
  `)
})

// Registration page
app.get('/register', (c) => {
  return c.render(
    <div className="page-with-header">
      <AppHeader showLogout={false} />
      <div className="register-container">
        <h1 className="title">ÂàùÂõûÁôªÈå≤</h1>
        
        <form className="register-form" method="POST" action="/register">
          <div className="form-group">
            <input 
              type="text" 
              name="userid" 
              placeholder="„É¶„Éº„Ç∂„ÉºID„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ" 
              className="form-input"
              required 
              minLength="3"
              maxLength="20"
            />
          </div>
          
          <div className="form-group">
            <input 
              type="password" 
              name="password" 
              id="password"
              placeholder="„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ" 
              className="form-input"
              required 
              minLength="6"
            />
          </div>
          
          <div className="form-group">
            <input 
              type="password" 
              name="password_confirm" 
              id="password_confirm"
              placeholder="„Éë„Çπ„ÉØ„Éº„ÉâÔºàÁ¢∫Ë™çÁî®Ôºâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ" 
              className="form-input"
              required 
              minLength="6"
            />
          </div>
          
          <div id="password-error" className="error-message" style={{display: 'none'}}>
            „Éë„Çπ„ÉØ„Éº„Éâ„Åå‰∏ÄËá¥„Åó„Åæ„Åõ„Çì
          </div>
          
          <button type="submit" id="register-btn" className="register-btn">
            ÁôªÈå≤
          </button>
        </form>
        
        <div className="login-link">
          <p>Êó¢„Å´„Ç¢„Ç´„Ç¶„É≥„Éà„Çí„ÅäÊåÅ„Å°„ÅÆÊñπ„ÅØ <a href="/welcome">„Åì„Å°„Çâ</a></p>
        </div>
      </div>
      
      <script>{`
        document.addEventListener('DOMContentLoaded', function() {
          const passwordField = document.getElementById('password');
          const confirmField = document.getElementById('password_confirm');
          const errorDiv = document.getElementById('password-error');
          const registerBtn = document.getElementById('register-btn');
          
          function validatePasswords() {
            const password = passwordField.value;
            const confirm = confirmField.value;
            
            if (confirm && password !== confirm) {
              errorDiv.style.display = 'block';
              registerBtn.disabled = true;
              return false;
            } else {
              errorDiv.style.display = 'none';
              registerBtn.disabled = false;
              return true;
            }
          }
          
          function validateForm() {
            const userid = document.querySelector('input[name="userid"]').value.trim();
            const password = passwordField.value;
            const confirm = confirmField.value;
            
            const isValid = userid.length >= 3 && 
                          password.length >= 6 && 
                          confirm.length >= 6 && 
                          password === confirm;
            
            registerBtn.disabled = !isValid;
          }
          
          passwordField.addEventListener('input', function() {
            validatePasswords();
            validateForm();
          });
          
          confirmField.addEventListener('input', function() {
            validatePasswords();
            validateForm();
          });
          
          document.querySelector('input[name="userid"]').addEventListener('input', function() {
            validateForm();
          });
          
          // Initial validation
          validateForm();
        });
      `}</script>
    </div>
  )
})

// Optimized header component with user profile
const AppHeader = ({ showLogout = false, currentUser = null }) => {
  const href = showLogout ? "/" : "/welcome"
  return (
    <header className="fixed-header">
      <a href={href} className="header-logo">
        <div className="header-ghost"></div>
        <h1 className="header-title">{APP_TITLE}</h1>
      </a>
      <div className="header-actions">
        {showLogout && currentUser && (
          <a href={`/profile/${currentUser.userid}`} className="header-profile-link">
            <div className="header-user-info">
              <div className="header-user-avatar">
                {currentUser.profileImage ? (
                  <img src={currentUser.profileImage} alt="„Éó„É≠„Éï„Ç£„Éº„É´ÁîªÂÉè" className="header-avatar-img" />
                ) : (
                  <div className="header-avatar-placeholder"></div>
                )}
              </div>
              <span className="header-username">{currentUser.displayName}</span>
              {currentUser.isVerified && <span className="header-verified-badge">Êú¨‰∫∫Ë™çË®ºÊ∏à„Åø</span>}
            </div>
          </a>
        )}
        {showLogout && <a href="/logout" className="header-logout">Logout</a>}
      </div>
    </header>
  )
}

// Constants to reduce memory usage
const MESSAGES = {
  LOGIN_ERROR: 'ID„Åæ„Åü„ÅØ„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÈñìÈÅï„Å£„Å¶„ÅÑ„Åæ„Åô',
  REQUIRED_FIELDS: '„Åô„Åπ„Å¶„ÅÆÈ†ÖÁõÆ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
  PASSWORD_MISMATCH: '„Éë„Çπ„ÉØ„Éº„Éâ„Åå‰∏ÄËá¥„Åó„Åæ„Åõ„Çì',
  USER_EXISTS: '„Åù„ÅÆ„É¶„Éº„Ç∂„ÉºID„ÅØÊó¢„Å´‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Åæ„Åô',
  REQUIRED_PROFILE: 'ÂøÖÈ†àÈ†ÖÁõÆ„Çí„Åô„Åπ„Å¶ÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ'
}

const APP_TITLE = 'HorrorConnect'
const MAIN_DESCRIPTION = 'Âêå„Åò„Éõ„É©„Éº„ÅÆË∂£Âë≥„ÇíÊåÅ„Å§‰ª≤Èñì„Å®Áπã„Åå„Çç„ÅÜ„ÄÇ„ÅÇ„Å™„Åü„ÅÆÂ•Ω„Åø„Å´Âêà„Å£„Åü‰∫∫„Å®„Éû„ÉÉ„ÉÅ„Åó„Å¶„ÄÅ„Ç§„Éô„É≥„ÉàÊÉÖÂ†±„ÇÑÊÄñ„ÅÑË©±„ÇíÂÖ±Êúâ„Åó„Çà„ÅÜ„ÄÇ'

// „É°„É¢„É™ÂäπÁéáÁöÑ„Å™Ê∞∏Á∂öÂåñÂØæÂøú„Çπ„Éà„É¨„Éº„Ç∏
const users = new Map()
const globalData: any = { 
  dms: new Map(), // DMÂäπÁéáÂåñ: Map<dmId, dmData>
  posts: [], 
  boards: new Map(),
  events: new Map(),
  identityVerifications: new Map(),
  blockedUsers: new Map(), // „Éñ„É≠„ÉÉ„ÇØÊ©üËÉΩ: Map<userId, Set<blockedUserId>>
  deletedConversations: new Map(), // ÂâäÈô§„Åï„Çå„Åü„Éà„Éº„ÇØ: Map<userId, Set<otherUserId>>
  followingUsers: new Map(), // „Éï„Ç©„É≠„ÉºÊ©üËÉΩ: Map<userId, Set<followedUserId>>
  profileImages: new Map() // „Éó„É≠„Éï„Ç£„Éº„É´ÁîªÂÉè: Map<userId, imageData>
}

// API Routes

// Debug API (non-authenticated for testing)
app.get('/api/debug/status', (c) => {
  return c.json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    usersCount: users.size,
    postsCount: posts.size,
    message: 'API is working'
  })
})

// Cookie debug API (non-authenticated)
app.get('/api/debug/cookies', (c) => {
  const horrorAuth = getCookie(c, 'horror_auth')
  const currentUser = getCookie(c, 'current_user')
  
  return c.json({
    horrorAuth: horrorAuth || 'not set',
    currentUser: currentUser || 'not set',
    allCookies: c.req.header('cookie') || 'none',
    isAuthenticated: horrorAuth === 'authenticated'
  })
})

// Login test API (non-authenticated)
app.post('/api/debug/login', async (c) => {
  const { password } = await c.req.json()
  
  if (password === '19861225') {
    setSecureCookie(c, 'horror_auth', 'authenticated', {
      maxAge: 60 * 60 * 24 * 30,
      httpOnly: false,
      path: '/'
    })
    setSecureCookie(c, 'current_user', 'admin', {
      maxAge: 60 * 60 * 24 * 30,
      httpOnly: false,
      path: '/'
    })
    
    return c.json({ success: true, message: 'Logged in successfully' })
  }
  
  return c.json({ success: false, message: 'Invalid password' }, 401)
})

// Quick feed test page
app.get('/quick-feed-test', (c) => {
  return c.html(`
    <!DOCTYPE html>
    <html lang="ja">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Feed Test - HorrorConnect</title>
        <script src="https://cdn.tailwindcss.com"></script>
    </head>
    <body class="bg-gray-100 p-4">
        <div class="max-w-4xl mx-auto bg-white p-6 rounded-lg shadow">
            <h1 class="text-2xl font-bold mb-4">Feed Loading Test</h1>
            
            <div class="mb-4 space-y-2">
                <button onclick="setAuthAndTestFeed()" class="w-full bg-blue-500 text-white p-3 rounded hover:bg-blue-600">
                    Step 1: Set Auth Cookies & Test Feed API
                </button>
                <button onclick="testMainPage()" class="w-full bg-green-500 text-white p-3 rounded hover:bg-green-600">
                    Step 2: Go to Main Page
                </button>
                <button onclick="clearLog()" class="w-full bg-red-500 text-white p-2 rounded hover:bg-red-600">
                    Clear Log
                </button>
            </div>
            
            <div id="log" class="bg-gray-800 text-green-400 p-4 rounded h-96 overflow-y-auto font-mono text-sm"></div>
        </div>
        
        <script>
            function log(message) {
                const logDiv = document.getElementById('log');
                const timestamp = new Date().toLocaleTimeString();
                logDiv.innerHTML += '[' + timestamp + '] ' + message + '\\n';
                logDiv.scrollTop = logDiv.scrollHeight;
            }
            
            function clearLog() {
                document.getElementById('log').innerHTML = '';
            }
            
            async function setAuthAndTestFeed() {
                log('=== STEP 1: Setting Auth Cookies and Testing Feed API ===');
                
                // Set authentication cookies
                document.cookie = 'horror_auth=authenticated; path=/; max-age=604800';
                document.cookie = 'current_user=admin; path=/; max-age=604800';
                
                log('‚úÖ Cookies set: ' + document.cookie);
                
                // Wait a moment for cookies to be set
                await new Promise(resolve => setTimeout(resolve, 500));
                
                // Test Feed API
                log('üîç Testing Feed API...');
                try {
                    const response = await fetch('/api/feed', {
                        credentials: 'same-origin',
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        }
                    });
                    
                    log('Feed API status: ' + response.status);
                    
                    if (response.ok) {
                        const data = await response.json();
                        log('‚úÖ Feed API SUCCESS!');
                        log('Posts received: ' + data.posts.length);
                        log('Current user: ' + data.currentUser.displayName);
                        
                        if (data.posts.length > 0) {
                            log('Recent posts:');
                            data.posts.slice(0, 3).forEach((post, i) => {
                                log(\`  \${i+1}. \${post.displayName}: \${post.content.substring(0, 50)}...\`);
                            });
                            log('üéâ FEED LOADING PROBLEM IS FIXED!');
                        } else {
                            log('‚ö†Ô∏è No posts found in database');
                        }
                    } else {
                        const text = await response.text();
                        log('‚ùå Feed API FAILED: ' + text);
                    }
                } catch (error) {
                    log('‚ùå Feed API ERROR: ' + error.message);
                }
            }
            
            function testMainPage() {
                log('=== STEP 2: Redirecting to Main Page ===');
                log('Current cookies: ' + document.cookie);
                log('Redirecting in 2 seconds...');
                
                setTimeout(() => {
                    window.location.href = '/';
                }, 2000);
            }
            
            // Auto-run on page load
            window.onload = function() {
                log('üöÄ Feed Test Page Loaded');
                log('Starting automatic test in 3 seconds...');
                setTimeout(() => {
                    setAuthAndTestFeed();
                }, 3000);
            };
        </script>
    </body>
    </html>
  `)
})

// Debug tab test page
app.get('/debug-tabs', (c) => {
  return c.html(`
    <!DOCTYPE html>
    <html>
    <head>
        <title>Tab Debug - HorrorConnect</title>
        <script src="https://cdn.tailwindcss.com"></script>
    </head>
    <body class="bg-gray-100 p-4">
        <div class="max-w-4xl mx-auto bg-white p-6 rounded-lg shadow">
            <h1 class="text-2xl font-bold mb-4">Tab Debug Test</h1>
            
            <div class="mb-4">
                <button onclick="setAuth()" class="bg-blue-500 text-white px-4 py-2 rounded mr-2">Set Auth</button>
                <button onclick="testMatch()" class="bg-green-500 text-white px-4 py-2 rounded mr-2">Test Match</button>
                <button onclick="testBoards()" class="bg-yellow-500 text-white px-4 py-2 rounded mr-2">Test Boards</button>
                <button onclick="testEvents()" class="bg-purple-500 text-white px-4 py-2 rounded mr-2">Test Events</button>
                <button onclick="clearLog()" class="bg-red-500 text-white px-4 py-2 rounded">Clear Log</button>
            </div>
            
            <div id="log" class="bg-gray-800 text-green-400 p-4 rounded h-96 overflow-y-auto font-mono text-sm"></div>
        </div>
        
        <script>
            let logDiv = document.getElementById('log');
            
            function log(message) {
                console.log(message);
                logDiv.innerHTML += new Date().toLocaleTimeString() + ': ' + message + '\\n';
                logDiv.scrollTop = logDiv.scrollHeight;
            }
            
            function setAuth() {
                document.cookie = 'horror_auth=authenticated; path=/; max-age=86400';
                document.cookie = 'current_user=debug_user1; path=/; max-age=86400';
                log('‚úÖ Auth cookies set');
            }
            
            async function testMatch() {
                try {
                    log('üîç Testing Match API...');
                    const response = await fetch('/api/matches');
                    const data = await response.json();
                    log(\`üìä Match API Response: \${JSON.stringify(data, null, 2)}\`);
                } catch (error) {
                    log(\`‚ùå Match API Error: \${error.message}\`);
                }
            }
            
            async function testBoards() {
                try {
                    log('üîç Testing Boards API...');
                    const response = await fetch('/api/boards');
                    const data = await response.json();
                    log(\`üìä Boards API Response: \${JSON.stringify(data, null, 2)}\`);
                } catch (error) {
                    log(\`‚ùå Boards API Error: \${error.message}\`);
                }
            }
            
            async function testEvents() {
                try {
                    log('üîç Testing Events API...');
                    const response = await fetch('/api/events');
                    const data = await response.json();
                    log(\`üìä Events API Response: \${JSON.stringify(data, null, 2)}\`);
                } catch (error) {
                    log(\`‚ùå Events API Error: \${error.message}\`);
                }
            }
            
            function clearLog() {
                logDiv.innerHTML = '';
            }
            
            // Capture console logs (with recursion prevention)
            const originalLog = console.log;
            const originalError = console.error;
            let logging = false;
            
            console.log = function(...args) {
                originalLog.apply(console, args);
                if (!logging) {
                    logging = true;
                    logDiv.innerHTML += new Date().toLocaleTimeString() + ': LOG: ' + args.join(' ') + '\\n';
                    logDiv.scrollTop = logDiv.scrollHeight;
                    logging = false;
                }
            };
            
            console.error = function(...args) {
                originalError.apply(console, args);
                if (!logging) {
                    logging = true;
                    logDiv.innerHTML += new Date().toLocaleTimeString() + ': ERROR: ' + args.join(' ') + '\\n';
                    logDiv.scrollTop = logDiv.scrollHeight;
                    logging = false;
                }
            };
            
            log('üöÄ Tab Debug Test Ready');
        </script>
    </body>
    </html>
  `)
})

// [REMOVED] Debug login page - cleanup of confusing test pages

// Êóß„Éï„Ç£„Éº„ÉâAPI„ÇíÂâäÈô§ÔºàÊñ∞„Åó„ÅÑ„Éá„Éº„Çø„Éô„Éº„Çπ„Éô„Éº„Çπ„ÅÆAPI„Å´ÁΩÆ„ÅçÊèõ„ÅàÊ∏à„ÅøÔºâ

app.post('/api/feed', passwordProtection, async (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const { content } = await c.req.json()
  
  if (!content || content.trim().length === 0) {
    return c.json({ error: 'ÊäïÁ®øÂÜÖÂÆπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ' }, 400)
  }
  
  const postId = `post_${postIdCounter++}`
  const newPost = {
    id: postId,
    userid: currentUserId,
    content: content.trim(),
    timestamp: Date.now(),
    createdAt: new Date().toISOString(),
    replies: [],
    bookmarkedBy: []
  }
  
  posts.set(postId, newPost)
  
  const user = users.get(currentUserId)
  const responsePost = {
    ...newPost,
    displayName: user?.profile?.displayName || user?.displayName || currentUserId,
    isBookmarked: false
  }
  
  return c.json({ post: responsePost })
})


// „Éû„ÉÉ„ÉÅ„É≥„Ç∞Èñ¢ÈÄ£API
app.get('/api/matches', passwordProtection, (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const currentUser = users.get(currentUserId)
  
  if (!currentUser?.horrorPreferences) {
    return c.json({ matches: [] })
  }
  
  const matches = []
  for (const [userid, user] of users.entries()) {
    if (userid === currentUserId) continue
    
    const score = calculateMatchingScore(currentUser, user)
    if (score > 0) {
      const matchingItems = getMatchingItems(currentUser, user)
      matches.push({
        userid,
        displayName: user.profile?.displayName || user.displayName || userid,
        matchingScore: score,
        matchingItems,
        isNew: user.createdAt && new Date(user.createdAt) > new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),
        prefecture: user.profile?.prefecture,
        identityVerified: user.identityVerified || false
      })
    }
  }
  
  matches.sort((a, b) => b.matchingScore - a.matchingScore)
  
  return c.json({ matches })
})

// Êé≤Á§∫ÊùøÈñ¢ÈÄ£API
app.get('/api/boards', passwordProtection, (c) => {
  const boardsList = Array.from(globalData.boards.values())
    .sort((a, b) => b.lastActivity - a.lastActivity)
    .map(board => {
      const creator = users.get(board.creatorId)
      return {
        ...board,
        creatorDisplayName: creator?.profile?.displayName || creator?.displayName || board.creatorId,
        postCount: board.posts?.length || 0
      }
    })
  
  return c.json({ boards: boardsList })
})

app.post('/api/boards', passwordProtection, async (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const { title, content } = await c.req.json()
  
  if (!title || !content) {
    return c.json({ error: '„Çø„Ç§„Éà„É´„Å®ÂÜÖÂÆπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ' }, 400)
  }
  
  const boardId = `board_${Date.now()}_${Math.random().toString(36).substring(7)}`
  const newBoard = {
    id: boardId,
    title: title.trim(),
    creatorId: currentUserId,
    createdAt: new Date().toISOString(),
    lastActivity: Date.now(),
    posts: [{
      id: `post_${Date.now()}`,
      userid: currentUserId,
      content: content.trim(),
      timestamp: Date.now(),
      createdAt: new Date().toISOString()
    }]
  }
  
  globalData.boards.set(boardId, newBoard)
  
  const creator = users.get(currentUserId)
  const responseBoard = {
    ...newBoard,
    creatorDisplayName: creator?.profile?.displayName || creator?.displayName || currentUserId,
    postCount: 1
  }
  
  return c.json({ board: responseBoard })
})

// „Ç§„Éô„É≥„ÉàÈñ¢ÈÄ£API
app.get('/api/events', passwordProtection, (c) => {
  const eventsList = Array.from(globalData.events.values())
    .sort((a, b) => new Date(b.eventDate).getTime() - new Date(a.eventDate).getTime())
    .map(event => {
      const creator = users.get(event.creatorId)
      return {
        ...event,
        creatorDisplayName: creator?.profile?.displayName || creator?.displayName || event.creatorId,
        participantCount: event.participants?.length || 0
      }
    })
  
  return c.json({ events: eventsList })
})

app.post('/api/events', passwordProtection, async (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const currentUser = users.get(currentUserId)
  
  // Êú¨‰∫∫Ë™çË®º„ÉÅ„Çß„ÉÉ„ÇØ
  if (!currentUser?.identityVerified) {
    return c.json({ error: '„Ç§„Éô„É≥„Éà‰ΩúÊàê„Å´„ÅØÊú¨‰∫∫Ë™çË®º„ÅåÂøÖË¶Å„Åß„Åô', requiresVerification: true }, 403)
  }
  
  const { eventDate, content, capacity, referenceLink } = await c.req.json()
  
  if (!eventDate || !content || !capacity) {
    return c.json({ error: 'ÂøÖÈ†àÈ†ÖÁõÆ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ' }, 400)
  }
  
  const eventId = `event_${Date.now()}_${Math.random().toString(36).substring(7)}`
  const newEvent = {
    id: eventId,
    creatorId: currentUserId,
    eventDate,
    content: content.trim(),
    capacity: parseInt(capacity),
    referenceLink: referenceLink || null,
    createdAt: new Date().toISOString(),
    participants: []
  }
  
  globalData.events.set(eventId, newEvent)
  
  const creator = users.get(currentUserId)
  const responseEvent = {
    ...newEvent,
    creatorDisplayName: creator?.profile?.displayName || creator?.displayName || currentUserId,
    participantCount: 0
  }
  
  return c.json({ event: responseEvent })
})

// Êú¨‰∫∫Ë™çË®ºÈñ¢ÈÄ£API
app.get('/api/identity-verification', passwordProtection, (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const currentUser = users.get(currentUserId)
  
  return c.json({
    isVerified: currentUser?.identityVerified || false,
    status: currentUser?.identityVerificationStatus || 'none'
  })
})

app.post('/api/identity-verification', passwordProtection, async (c) => {
  const currentUserId = getCookie(c, 'current_user')
  
  // ÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØ„ÄÅ„Åì„Åì„ÅßÁîªÂÉè„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Å®Ë™çË®ºÂá¶ÁêÜ„ÇíË°å„ÅÜ
  // ‰ªäÂõû„ÅØ„Éá„É¢Áî®„Å®„Åó„Å¶Ëá™ÂãïÊâøË™ç
  const user = users.get(currentUserId)
  if (user) {
    users.set(currentUserId, {
      ...user,
      identityVerified: true,
      identityVerificationStatus: 'approved',
      identityVerificationDate: new Date().toISOString()
    })
  }
  
  return c.json({ 
    success: true, 
    status: 'approved',
    message: 'Êú¨‰∫∫Ë™çË®º„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü'
  })
})

// „É¶„Éº„Ç∂„Éº„Éó„É≠„Éï„Ç£„Éº„É´API
app.get('/api/user/:userid', passwordProtection, (c) => {
  const userid = c.req.param('userid')
  const user = users.get(userid)
  
  if (!user) {
    return c.json({ error: '„É¶„Éº„Ç∂„Éº„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì' }, 404)
  }
  
  return c.json({
    userid,
    displayName: user.profile?.displayName || user.displayName || userid,
    profile: user.profile,
    identityVerified: user.identityVerified || false,
    createdAt: user.createdAt
  })
})

// ËªΩÈáè„Éá„Éº„ÇøÊ∞∏Á∂öÂåñ„Ç∑„Çπ„ÉÜ„É†Ôºà„É°„É¢„É™ÂäπÁéáÈáçË¶ñÔºâ
const STORAGE_FILE = '/tmp/horror_users.json'
const MAX_BACKUP_SIZE = 100 * 1024 // 100KBÂà∂Èôê

// „Éá„Éº„Çø‰øùÂ≠òÔºàÈùûÂêåÊúü„ÄÅ„É°„É¢„É™ÂäπÁéáÈáçË¶ñÔºâ
const saveUserData = async () => {
  try {
    if (users.size === 0) return // Á©∫„ÅÆÂ†¥Âêà„ÅØ‰øùÂ≠ò„Åó„Å™„ÅÑ
    
    const userData = Array.from(users.entries()).map(([userid, data]) => {
      // ÈáçË¶Å„Å™„Éá„Éº„Çø„ÅÆ„Åø‰øùÂ≠ò„Åó„Å¶„Çµ„Ç§„Ç∫ÂâäÊ∏õ
      return {
        userid,
        password: data.password,
        displayName: data.displayName,
        profile: data.profile ? {
          displayName: data.profile.displayName,
          birthDate: data.profile.birthDate,
          gender: data.profile.gender,
          prefecture: data.profile.prefecture,
          // Èáç„ÅÑ„Éá„Éº„Çø„ÅØÈô§Â§ñ
          horrorGenres: Array.isArray(data.profile.horrorGenres) ? data.profile.horrorGenres.slice(0, 5) : [],
          experience: data.profile.experience,
          bio: data.profile.bio ? data.profile.bio.substring(0, 200) : '', // 200ÊñáÂ≠óÂà∂Èôê
        } : null,
        createdAt: data.createdAt,
        lastLogin: data.lastLogin || new Date().toISOString()
      }
    })
    
    const jsonData = JSON.stringify(userData)
    if (jsonData.length > MAX_BACKUP_SIZE) {
      console.log('Warning: User data exceeds size limit, skipping save')
      return
    }
    
    // Cloudflare WorkersÁí∞Â¢É„Åß„ÅØ‰ΩøÁî®‰∏çÂèØ - ÈñãÁô∫Áí∞Â¢É„Åß„ÅÆ„ÅøÂãï‰Ωú
    // await writeFile(STORAGE_FILE, jsonData)
  } catch (error) {
    console.error('Failed to save user data:', error)
  }
}

// „Éá„Éº„ÇøË™≠„ÅøËæº„ÅøÔºàËµ∑ÂãïÊôÇ„ÅÆ„ÅøÔºâ
const loadUserData = async () => {
  try {
    // Cloudflare WorkersÁí∞Â¢É„Åß„ÅØ‰ΩøÁî®‰∏çÂèØ - ÈñãÁô∫Áí∞Â¢É„Åß„ÅÆ„ÅøÂãï‰Ωú
    // const data = await readFile(STORAGE_FILE, 'utf8')
    // const userData = JSON.parse(data)
    
    // userData.forEach(user => {
    //   users.set(user.userid, {
    //     ...user,
    //     createdAt: new Date(user.createdAt || Date.now())
    //   })
    // })
    // console.log(`Loaded ${userData.length} users from storage`)
  } catch (error) {
    // „Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØÂàùÊúüÂåñ
    console.log('No existing user data found, initializing with debug users')
    initializeDebugUsers()
  }
}

// „Éá„Éê„ÉÉ„Ç∞Áî®„ÅÆ„É¶„Éº„Ç∂„ÉºÂàùÊúüÂåñÊ©üËÉΩÔºàPM2ÂÜçËµ∑ÂãïÂØæÂøúÔºâ
// Êó¢Â≠ò„Ç≥„Éº„Éâ„Å∏„ÅÆÂΩ±Èüø„ÇíÊúÄÂ∞èÈôê„Å´ÊäëÂà∂„Åó„Åü‰∏ÄÊôÇÁöÑÂØæÂá¶Ê≥ï
const initializeDebugUsers = () => {
  // „Éá„Éê„ÉÉ„Ç∞Áí∞Â¢É„Åß„ÅÆ„Åø„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº„ÇíËá™Âãï‰ΩúÊàê
  const debugUsers = [
    {
      userid: 'debug_user1',
      password: 'password123',
      displayName: '„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº1',
      birthDate: '19900101',
      profile: {
        displayName: '„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº1',
        birthDate: '19900101',
        gender: 'Â•≥ÊÄß',
        prefecture: 'Êù±‰∫¨ÈÉΩ',
        horrorGenres: ['„Éõ„É©„ÉºÊò†Áîª', '„Éõ„É©„ÉºÂ∞èË™¨'],
        experience: 'ÂàùÂøÉËÄÖ',
        bio: '„Éõ„É©„ÉºÊò†Áîª„ÅåÂ§ßÂ•Ω„Åç„Åß„ÅôÔºÅ'
      },
      horrorPreferences: {
        mediaTypes: ['Êò†Áîª', 'Â∞èË™¨'],
        genreTypes: ['„Çµ„Ç§„Ç≥„Éõ„É©„Éº', '„Çµ„Çπ„Éö„É≥„Çπ'],
        ngTypes: ['„Ç∞„É≠'],
        ghostBelief: '‰ø°„Åò„Çã',
        storyBelief: 'Â•Ω„Åç',
        paranormalActivity: 'ËààÂë≥„ÅÇ„Çä'
      }
    },
    {
      userid: 'debug_user2', 
      password: 'password456',
      displayName: '„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº2',
      birthDate: '19851215',
      profile: {
        displayName: '„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº2',
        birthDate: '19851215',
        gender: 'Áî∑ÊÄß',
        prefecture: 'Â§ßÈò™Â∫ú',
        horrorGenres: ['ÂøÉÈúäÁèæË±°', '„Éõ„É©„Éº„Ç≤„Éº„É†'],
        experience: '‰∏äÁ¥öËÄÖ',
        bio: 'ÂøÉÈúä„Çπ„Éù„ÉÉ„ÉàÂ∑°„Çä„ÅåË∂£Âë≥„Åß„Åô„ÄÇ'
      },
      horrorPreferences: {
        mediaTypes: ['„Ç≤„Éº„É†', 'ÂÆüË©±„Éª‰ΩìÈ®ìË´á'],
        genreTypes: ['ÂøÉÈúä„Éª„Ç™„Ç´„É´„Éà', '„Çµ„Ç§„Ç≥„Éõ„É©„Éº'],
        ngTypes: ['„Ç≥„É°„Éá„Ç£„Éõ„É©„Éº'],
        ghostBelief: '‰ø°„Åò„Çã',
        storyBelief: 'Â•Ω„Åç',
        paranormalActivity: '‰ΩìÈ®ì„ÅÇ„Çä'
      }
    },
    {
      userid: 'debug_user3',
      password: 'password789',
      displayName: '„Éõ„É©„Éº„Éï„Ç°„É≥Â§™ÈÉé',
      birthDate: '19950301',
      profile: {
        displayName: '„Éõ„É©„Éº„Éï„Ç°„É≥Â§™ÈÉé',
        birthDate: '19950301',
        gender: 'Áî∑ÊÄß',
        prefecture: 'Á•ûÂ•àÂ∑ùÁúå',
        horrorGenres: ['„Éõ„É©„ÉºÊò†Áîª', '„Éõ„É©„ÉºÂ∞èË™¨'],
        experience: '‰∏≠Á¥öËÄÖ',
        bio: '„Éõ„É©„ÉºÂÖ®Ëà¨„ÅåÂ§ßÂ•Ω„Åç„Åß„ÅôÔºÅ‰∏ÄÁ∑í„Å´ÊÄñ„ÅÑË©±„Çí„Åó„Åæ„Åõ„Çì„ÅãÔºü'
      },
      horrorPreferences: {
        mediaTypes: ['Êò†Áîª', 'Â∞èË™¨'],
        genreTypes: ['„Çµ„Ç§„Ç≥„Éõ„É©„Éº', '„ÇØ„É©„Ç∑„ÉÉ„ÇØ„Éõ„É©„Éº', '„Çµ„Çπ„Éö„É≥„Çπ'],
        ngTypes: [],
        ghostBelief: 'Âçä‰ø°ÂçäÁñë',
        storyBelief: 'Â•Ω„Åç',
        paranormalActivity: 'ËààÂë≥„ÅÇ„Çä'
      }
    }
  ]
  
  debugUsers.forEach((user, index) => {
    // ÊúÄÂàù„ÅÆ2„É¶„Éº„Ç∂„Éº„ÅØÂè§„ÅÑÁôªÈå≤„ÄÅ3Áï™ÁõÆ„ÅØÊñ∞„Åó„ÅÑÁôªÈå≤ÔºàNEW„É©„Éô„É´Ë°®Á§∫Ôºâ
    const createdAt = index === 2 ? new Date().toISOString() : new Date(Date.now() - 45 * 24 * 60 * 60 * 1000).toISOString()
    
    // ÊúÄÂàù„ÅÆ„É¶„Éº„Ç∂„Éº„ÅØÊú¨‰∫∫Ë™çË®ºÊ∏à„Åø„Å´Ë®≠ÂÆöÔºà„ÉÜ„Çπ„ÉàÁî®Ôºâ
    const isFirstUser = index === 0
    
    users.set(user.userid, {
      userid: user.userid,
      password: user.password,
      displayName: user.displayName,
      createdAt,
      identityVerified: isFirstUser, // debug_user1„ÅØÊú¨‰∫∫Ë™çË®ºÊ∏à„Åø
      identityVerificationStatus: isFirstUser ? 'approved' : 'none',
      horrorPreferences: user.horrorPreferences, // „Éõ„É©„ÉºÂ•Ω„ÅøË®≠ÂÆö„ÇíËøΩÂä†
      profile: {
        displayName: user.displayName,
        birthDate: user.birthDate,
        ...user.profile
      }
    })
  })
  
  console.log(`[DEBUG] ${debugUsers.length}‰∫∫„ÅÆ„Éá„Éê„ÉÉ„Ç∞„É¶„Éº„Ç∂„Éº„ÇíÂàùÊúüÂåñ„Åó„Åæ„Åó„Åü`)
}

// „Éá„Éº„ÇøÊï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØÊ©üËÉΩ
const checkDataIntegrity = async () => {
  console.log(`[SYSTEM] „Éá„Éº„ÇøÊï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØÈñãÂßã`)
  console.log(`[SYSTEM] „É¶„Éº„Ç∂„ÉºÊï∞: ${users.size}, ÊäïÁ®øÊï∞: ${posts.size}`)
  
  // Ê∞∏Á∂öÂåñ„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„ÅøË©¶Ë°å
  await loadUserData()
  
  // „É¶„Éº„Ç∂„Éº„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØÂÜçÂàùÊúüÂåñ
  if (users.size === 0) {
    console.log(`[WARNING] „É¶„Éº„Ç∂„Éº„Éá„Éº„Çø„ÅåÊ∂àÂ§±„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇÁ∑äÊÄ•ÂÜçÂàùÊúüÂåñ„ÇíÂÆüË°å„Åó„Åæ„Åô„ÄÇ`)
    initializeDebugUsers()
  }
  
  // ÊäïÁ®ø„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØÂÜçÂàùÊúüÂåñ
  if (posts.size === 0) {
    console.log(`[WARNING] ÊäïÁ®ø„Éá„Éº„Çø„ÅåÊ∂àÂ§±„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇÁ∑äÊÄ•ÂÜçÂàùÊúüÂåñ„ÇíÂÆüË°å„Åó„Åæ„Åô„ÄÇ`)
    initializeDebugPosts()
  }
  
  // „Éá„Éê„ÉÉ„Ç∞„É¶„Éº„Ç∂„Éº„ÅÆ„Éó„É≠„Éï„Ç£„Éº„É´ÂÆåÊï¥ÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
  for (const [userid, user] of users.entries()) {
    if (!user.profile || !user.profile.displayName) {
      console.log(`[WARNING] „É¶„Éº„Ç∂„Éº ${userid} „ÅÆ„Éó„É≠„Éï„Ç£„Éº„É´„Åå‰∏çÂÆåÂÖ®„Åß„Åô„ÄÇ`)
    }
  }
}

// „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥Ëµ∑ÂãïÊôÇ„Å´„Éá„Éê„ÉÉ„Ç∞„É¶„Éº„Ç∂„Éº„ÇíÂàùÊúüÂåñ
initializeDebugUsers()

// ÊäïÁ®ø„Éá„Éº„Çø„ÅÆÁÆ°ÁêÜÔºà„Ç§„É≥„É°„É¢„É™Ôºâ
const posts = new Map()
let postIdCounter = 1

// „Éá„Éê„ÉÉ„Ç∞Áî®„ÅÆÂàùÊúüÊäïÁ®ø„Éá„Éº„Çø
const initializeDebugPosts = () => {
  const debugPosts = [
    {
      userid: 'debug_user1',
      content: '‰ªäÂ§ú„ÄÅ‰∏Ä‰∫∫„ÅßÊ∑±Â§ú„ÅÆ„Ç≥„É≥„Éì„Éã„Å´Ë°å„Å£„Åü„Çâ„ÄÅË™∞„ÇÇ„ÅÑ„Å™„ÅÑ„ÅÆ„Å´„É¨„Ç∏„Åã„ÇâÈü≥Ê•Ω„ÅåËÅû„Åì„Åà„Å¶„Åç„Å¶...üò∞',
      timestamp: Date.now() - 3600000 // 1ÊôÇÈñìÂâç
    },
    {
      userid: 'debug_user2', 
      content: 'Êñ∞„Åó„ÅÑ„Éõ„É©„ÉºÊò†Áîª„ÄåÂë™„Çè„Çå„ÅüÈ§®„Äç„ÇíË¶ã„Å¶„Åç„Åæ„Åó„ÅüÔºÅÊúÄÂæå„ÅÆ„Ç∑„Éº„É≥„ÅßÊÄù„Çè„ÅöÂè´„Çì„Åß„Åó„Åæ„Å£„Åüüò±„Åø„Çì„Å™„ÇÇË¶ã„ÅüÔºü',
      timestamp: Date.now() - 7200000 // 2ÊôÇÈñìÂâç
    },
    {
      userid: 'debug_user1',
      content: 'Â§ú‰∏≠„Å´ÊÄñ„ÅÑË©±„ÇíËÅû„ÅÑ„Å¶„ÅÑ„Åü„Çâ„ÄÅÂ§ñ„Åã„ÇâÂ≠ê‰æõ„ÅÆÁ¨ë„ÅÑÂ£∞„Åå...„Åß„ÇÇËøëÊâÄ„Å´Â≠ê‰æõ„ÅØ„ÅÑ„Å™„ÅÑ„ÅØ„Åöü´£',
      timestamp: Date.now() - 10800000 // 3ÊôÇÈñìÂâç
    }
  ]
  
  debugPosts.forEach(post => {
    const postId = `post_${postIdCounter++}`
    posts.set(postId, {
      id: postId,
      userid: post.userid,
      content: post.content,
      timestamp: post.timestamp,
      createdAt: new Date(post.timestamp).toISOString(),
      replies: [],
      bookmarkedBy: []
    })
  })
  
  console.log(`[DEBUG] ${debugPosts.length}‰ª∂„ÅÆ„Éá„Éê„ÉÉ„Ç∞ÊäïÁ®ø„ÇíÂàùÊúüÂåñ„Åó„Åæ„Åó„Åü`)
}

// „Éá„Éê„ÉÉ„Ç∞ÊäïÁ®ø„ÇíÂàùÊúüÂåñ
initializeDebugPosts()

// ÂàùÂõû„Éá„Éº„ÇøÊï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØÔºàËµ∑ÂãïÊôÇ„ÅÆ„ÅøÔºâ
// DISABLED for Cloudflare Workers - async operations not allowed in global scope
// checkDataIntegrity().catch(err => console.error('Data integrity check failed:', err))

// ÂÆöÊúüÁöÑ„Å™„Éá„Éº„Çø‰øùÂ≠òÔºà„É°„É¢„É™ÂäπÁéáÈáçË¶ñ„Éª30ÂàÜÈñìÈöîÔºâ
let autoSaveTimer: NodeJS.Timeout | null = null
const startAutoSave = () => {
  if (autoSaveTimer) clearInterval(autoSaveTimer)
  
  autoSaveTimer = setInterval(() => {
    if (users.size > 0) {
      saveUserData().catch(err => console.error('Auto-save failed:', err))
    }
  }, 30 * 60 * 1000) // 30ÂàÜ„Åî„Å®
}

// Ëá™Âãï‰øùÂ≠òÈñãÂßã  
// DISABLED for Cloudflare Workers - async operations not allowed in global scope
// startAutoSave()

// „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÁµÇ‰∫ÜÊôÇ„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
// DISABLED for Cloudflare Workers - process events not available
/*
process.on('SIGTERM', () => {
  console.log('SIGTERM received, saving data before shutdown...')
  if (autoSaveTimer) clearInterval(autoSaveTimer)
  saveUserData().then(() => process.exit(0)).catch(() => process.exit(1))
})

process.on('SIGINT', () => {
  console.log('SIGINT received, saving data before shutdown...')
  if (autoSaveTimer) clearInterval(autoSaveTimer)
  saveUserData().then(() => process.exit(0)).catch(() => process.exit(1))
})
*/

// „Éû„ÉÉ„ÉÅ„É≥„Ç∞Â∫¶Ë®àÁÆó„É≠„Ç∏„ÉÉ„ÇØ
const calculateMatchingScore = (user1: any, user2: any) => {
  if (!user1.horrorPreferences || !user2.horrorPreferences) {
    return 0 // „Éõ„É©„ÉºÂ•Ω„ÅøË®≠ÂÆö„Åå„Å™„ÅÑÂ†¥Âêà„ÅØ0%
  }
  
  const pref1 = user1.horrorPreferences
  const pref2 = user2.horrorPreferences
  
  let totalWeights = 0
  let matchingPoints = 0
  
  // „É°„Éá„Ç£„Ç¢„Çø„Ç§„Éó„ÅÆ‰∏ÄËá¥Â∫¶ (Èáç„Åø: 30%)
  if (pref1.mediaTypes && pref2.mediaTypes && 
      pref1.mediaTypes.length > 0 && pref2.mediaTypes.length > 0) {
    const commonMedia = pref1.mediaTypes.filter((type: string) => 
      pref2.mediaTypes.includes(type)
    )
    const mediaScore = commonMedia.length / Math.max(pref1.mediaTypes.length, pref2.mediaTypes.length)
    matchingPoints += mediaScore * 30
    totalWeights += 30
  }
  
  // „Ç∏„É£„É≥„É´„Çø„Ç§„Éó„ÅÆ‰∏ÄËá¥Â∫¶ (Èáç„Åø: 40%)
  if (pref1.genreTypes && pref2.genreTypes && 
      pref1.genreTypes.length > 0 && pref2.genreTypes.length > 0) {
    const commonGenres = pref1.genreTypes.filter((genre: string) => 
      pref2.genreTypes.includes(genre)
    )
    const genreScore = commonGenres.length / Math.max(pref1.genreTypes.length, pref2.genreTypes.length)
    matchingPoints += genreScore * 40
    totalWeights += 40
  }
  
  // ÂøÉÈúä‰ø°Âøµ„ÅÆ‰∏ÄËá¥Â∫¶ (Èáç„Åø: 10%)
  if (pref1.ghostBelief && pref2.ghostBelief) {
    if (pref1.ghostBelief === pref2.ghostBelief) {
      matchingPoints += 10
    }
    totalWeights += 10
  }
  
  // ÊÄñ„ÅÑË©±‰ø°Âøµ„ÅÆ‰∏ÄËá¥Â∫¶ (Èáç„Åø: 10%)
  if (pref1.storyBelief && pref2.storyBelief) {
    if (pref1.storyBelief === pref2.storyBelief) {
      matchingPoints += 10
    }
    totalWeights += 10
  }
  
  // Ë∂ÖÂ∏∏ÁèæË±°Ê¥ªÂãï„ÅÆ‰∏ÄËá¥Â∫¶ (Èáç„Åø: 10%)
  if (pref1.paranormalActivity && pref2.paranormalActivity) {
    if (pref1.paranormalActivity === pref2.paranormalActivity) {
      matchingPoints += 10
    }
    totalWeights += 10
  }
  
  // NG„Çø„Ç§„Éó„ÅØ„Éû„Ç§„Éä„ÇπË¶ÅÁ¥†„Å®„Åó„Å¶ËÄÉÊÖÆ
  if (pref1.ngTypes && pref2.genreTypes) {
    const negativeMatches = pref1.ngTypes.filter((ngType: string) => 
      pref2.genreTypes.includes(ngType)
    )
    matchingPoints -= negativeMatches.length * 15 // NG„Çø„Ç§„Éó‰∏ÄËá¥„Åß15%Ê∏õÁÇπ
  }
  
  if (pref2.ngTypes && pref1.genreTypes) {
    const negativeMatches = pref2.ngTypes.filter((ngType: string) => 
      pref1.genreTypes.includes(ngType)
    )
    matchingPoints -= negativeMatches.length * 15 // NG„Çø„Ç§„Éó‰∏ÄËá¥„Åß15%Ê∏õÁÇπ
  }
  
  if (totalWeights === 0) return 0
  
  const finalScore = Math.max(0, Math.min(100, (matchingPoints / totalWeights) * 100))
  return Math.round(finalScore)
}

// ‰∏ÄËá¥„Åó„ÅüÈ†ÖÁõÆ„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞
const getMatchingItems = (user1: any, user2: any) => {
  if (!user1.horrorPreferences || !user2.horrorPreferences) {
    return []
  }
  
  const pref1 = user1.horrorPreferences
  const pref2 = user2.horrorPreferences
  const matchingItems: string[] = []
  
  // „É°„Éá„Ç£„Ç¢„Çø„Ç§„Éó„ÅÆ‰∏ÄËá¥
  if (pref1.mediaTypes && pref2.mediaTypes) {
    const commonMedia = pref1.mediaTypes.filter((type: string) => 
      pref2.mediaTypes.includes(type)
    )
    matchingItems.push(...commonMedia)
  }
  
  // „Ç∏„É£„É≥„É´„Çø„Ç§„Éó„ÅÆ‰∏ÄËá¥
  if (pref1.genreTypes && pref2.genreTypes) {
    const commonGenres = pref1.genreTypes.filter((genre: string) => 
      pref2.genreTypes.includes(genre)
    )
    matchingItems.push(...commonGenres)
  }
  
  // ‰ø°ÂøµÁ≥ª„ÅÆ‰∏ÄËá¥
  if (pref1.ghostBelief && pref2.ghostBelief && pref1.ghostBelief === pref2.ghostBelief) {
    matchingItems.push(`ÂøÉÈúä‰ø°Âøµ: ${pref1.ghostBelief}`)
  }
  
  if (pref1.storyBelief && pref2.storyBelief && pref1.storyBelief === pref2.storyBelief) {
    matchingItems.push(`ÊÄñ„ÅÑË©±‰ø°Âøµ: ${pref1.storyBelief}`)
  }
  
  if (pref1.paranormalActivity && pref2.paranormalActivity && pref1.paranormalActivity === pref2.paranormalActivity) {
    matchingItems.push(`Ë∂ÖÂ∏∏ÁèæË±°Ê¥ªÂãï: ${pref1.paranormalActivity}`)
  }
  
  return matchingItems
}

// Registration form handler
app.post('/register', async (c) => {
  const formData = await c.req.formData()
  const userid = formData.get('userid')?.toString().trim()
  const password = formData.get('password')?.toString()
  const passwordConfirm = formData.get('password_confirm')?.toString()
  
  // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥
  if (!userid || !password || !passwordConfirm) {
    return c.render(
      <div className="register-container">
        <h1 className="title">‰ºöÂì°ÁôªÈå≤</h1>
        <div className="error-message">{MESSAGES.REQUIRED_FIELDS}</div>
        <a href="/register" className="btn btn-primary">Êàª„Çã</a>
      </div>
    )
  }
  
  if (password !== passwordConfirm) {
    return c.render(
      <div className="register-container">
        <h1 className="title">‰ºöÂì°ÁôªÈå≤</h1>
        <div className="error-message">{MESSAGES.PASSWORD_MISMATCH}</div>
        <a href="/register" className="btn btn-primary">Êàª„Çã</a>
      </div>
    )
  }
  
  if (users.has(userid)) {
    return c.render(
      <div className="register-container">
        <h1 className="title">‰ºöÂì°ÁôªÈå≤</h1>
        <div className="error-message">{MESSAGES.USER_EXISTS}</div>
        <a href="/register" className="btn btn-primary">Êàª„Çã</a>
      </div>
    )
  }
  
  // „É¶„Éº„Ç∂„ÉºÁôªÈå≤
  users.set(userid, {
    userid,
    password,
    createdAt: new Date().toISOString()
  })
  
  // „Éá„Éº„ÇøÊ∞∏Á∂öÂåñÔºàÈùûÂêåÊúüÂÆüË°å„Åß„É¨„Çπ„Éù„É≥„ÇπÈÅÖÂª∂„Å™„ÅóÔºâ
  saveUserData().catch(err => console.error('Save failed:', err))
  
  // ÁôªÈå≤ÊàêÂäü - Ëá™Âãï„É≠„Ç∞„Ç§„É≥
  setSecureCookie(c, 'horror_auth', 'authenticated', {
    maxAge: 60 * 60 * 24 * 30, // 30 days
    httpOnly: false, // Allow JavaScript access for debugging  
    path: '/'
  })
  setSecureCookie(c, 'current_user', userid, {
    maxAge: 60 * 60 * 24 * 30,
    httpOnly: false, // Allow JavaScript access for debugging
    path: '/'
  })
  
  return c.redirect('/profile-setup')
})

// Initial profile setup page
app.get('/profile-setup', passwordProtection, (c) => {
  return c.render(
    <div className="authenticated-body">
      <AppHeader showLogout={true} />
      <div className="profile-setup-container">
        <h2 className="profile-setup-title">Âü∫Êú¨„Éó„É≠„Éï„Ç£„Éº„É´Ë®≠ÂÆö</h2>
        <form id="profile-form" className="profile-form" method="POST" action="/profile-setup">
          <div className="profile-field">
            <input 
              type="text" 
              name="display_name" 
              className="profile-input"
              placeholder="Ë°®Á§∫Âêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
              required
              maxLength="20"
            />
          </div>
          
          <div className="profile-field">
            <input 
              type="text" 
              id="birth-date-input"
              name="birth_date" 
              className="profile-input" 
              placeholder="ÁîüÂπ¥ÊúàÊó•„ÄÇ2000Âπ¥1Êúà1Êó•Áîü„Åæ„Çå„Å™„Çâ:20000101"
              required 
              maxLength="8"
              pattern="[0-9]{8}"
              title="8Ê°Å„ÅÆÊï∞Â≠ó„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºà‰æãÔºö20000101Ôºâ"
            />
            <span className="field-note">*ÈùûÂÖ¨Èñã„ÄÇÂπ¥ÈΩ¢Á¢∫Ë™ç„Å®„Éë„Çπ„ÉØ„Éº„ÉâÂÜçË®≠ÂÆöÊôÇ„Å´Âà©Áî®„ÄÇ</span>
          </div>
          
          <div className="profile-field">
            <select name="gender" className="profile-select" required>
              <option value="">ÊÄßÂà•„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</option>
              <option value="Áî∑ÊÄß">Áî∑ÊÄß</option>
              <option value="Â•≥ÊÄß">Â•≥ÊÄß</option>
              <option value="„Åù„ÅÆ‰ªñ/ÁÑ°ÂõûÁ≠î">„Åù„ÅÆ‰ªñ/ÁÑ°ÂõûÁ≠î</option>
            </select>
          </div>
          
          <div className="profile-field">
            <select name="prefecture" className="profile-select" required>
              <option value="">ÈÉΩÈÅìÂ∫úÁúå„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</option>
              <option value="ÂåóÊµ∑ÈÅì">ÂåóÊµ∑ÈÅì</option>
              <option value="ÈùíÊ£ÆÁúå">ÈùíÊ£ÆÁúå</option>
              <option value="Â≤©ÊâãÁúå">Â≤©ÊâãÁúå</option>
              <option value="ÂÆÆÂüéÁúå">ÂÆÆÂüéÁúå</option>
              <option value="ÁßãÁî∞Áúå">ÁßãÁî∞Áúå</option>
              <option value="Â±±ÂΩ¢Áúå">Â±±ÂΩ¢Áúå</option>
              <option value="Á¶èÂ≥∂Áúå">Á¶èÂ≥∂Áúå</option>
              <option value="Ëå®ÂüéÁúå">Ëå®ÂüéÁúå</option>
              <option value="Ê†ÉÊú®Áúå">Ê†ÉÊú®Áúå</option>
              <option value="Áæ§È¶¨Áúå">Áæ§È¶¨Áúå</option>
              <option value="ÂüºÁéâÁúå">ÂüºÁéâÁúå</option>
              <option value="ÂçÉËëâÁúå">ÂçÉËëâÁúå</option>
              <option value="Êù±‰∫¨ÈÉΩ">Êù±‰∫¨ÈÉΩ</option>
              <option value="Á•ûÂ•àÂ∑ùÁúå">Á•ûÂ•àÂ∑ùÁúå</option>
              <option value="Êñ∞ÊΩüÁúå">Êñ∞ÊΩüÁúå</option>
              <option value="ÂØåÂ±±Áúå">ÂØåÂ±±Áúå</option>
              <option value="Áü≥Â∑ùÁúå">Áü≥Â∑ùÁúå</option>
              <option value="Á¶è‰∫ïÁúå">Á¶è‰∫ïÁúå</option>
              <option value="Â±±Ê¢®Áúå">Â±±Ê¢®Áúå</option>
              <option value="Èï∑ÈáéÁúå">Èï∑ÈáéÁúå</option>
              <option value="Â≤êÈòúÁúå">Â≤êÈòúÁúå</option>
              <option value="ÈùôÂ≤°Áúå">ÈùôÂ≤°Áúå</option>
              <option value="ÊÑõÁü•Áúå">ÊÑõÁü•Áúå</option>
              <option value="‰∏âÈáçÁúå">‰∏âÈáçÁúå</option>
              <option value="ÊªãË≥ÄÁúå">ÊªãË≥ÄÁúå</option>
              <option value="‰∫¨ÈÉΩÂ∫ú">‰∫¨ÈÉΩÂ∫ú</option>
              <option value="Â§ßÈò™Â∫ú">Â§ßÈò™Â∫ú</option>
              <option value="ÂÖµÂ∫´Áúå">ÂÖµÂ∫´Áúå</option>
              <option value="Â•àËâØÁúå">Â•àËâØÁúå</option>
              <option value="ÂíåÊ≠åÂ±±Áúå">ÂíåÊ≠åÂ±±Áúå</option>
              <option value="È≥•ÂèñÁúå">È≥•ÂèñÁúå</option>
              <option value="Â≥∂Ê†πÁúå">Â≥∂Ê†πÁúå</option>
              <option value="Â≤°Â±±Áúå">Â≤°Â±±Áúå</option>
              <option value="Â∫ÉÂ≥∂Áúå">Â∫ÉÂ≥∂Áúå</option>
              <option value="Â±±Âè£Áúå">Â±±Âè£Áúå</option>
              <option value="Âæ≥Â≥∂Áúå">Âæ≥Â≥∂Áúå</option>
              <option value="È¶ôÂ∑ùÁúå">È¶ôÂ∑ùÁúå</option>
              <option value="ÊÑõÂ™õÁúå">ÊÑõÂ™õÁúå</option>
              <option value="È´òÁü•Áúå">È´òÁü•Áúå</option>
              <option value="Á¶èÂ≤°Áúå">Á¶èÂ≤°Áúå</option>
              <option value="‰ΩêË≥ÄÁúå">‰ΩêË≥ÄÁúå</option>
              <option value="Èï∑Â¥éÁúå">Èï∑Â¥éÁúå</option>
              <option value="ÁÜäÊú¨Áúå">ÁÜäÊú¨Áúå</option>
              <option value="Â§ßÂàÜÁúå">Â§ßÂàÜÁúå</option>
              <option value="ÂÆÆÂ¥éÁúå">ÂÆÆÂ¥éÁúå</option>
              <option value="ÈπøÂÖêÂ≥∂Áúå">ÈπøÂÖêÂ≥∂Áúå</option>
              <option value="Ê≤ñÁ∏ÑÁúå">Ê≤ñÁ∏ÑÁúå</option>
              <option value="Êµ∑Â§ñ">Êµ∑Â§ñ</option>
            </select>
          </div>
          
          <div className="profile-field">
            <textarea 
              name="self_introduction" 
              className="profile-textarea"
              placeholder="Ëá™Â∑±Á¥π‰ªã„Çí„ÅîÂÖ•Âäõ„Åè„Å†„Åï„ÅÑÔºà‰ªªÊÑèÔºâ"
              maxLength="500"
              rows="4"
            ></textarea>
          </div>
          
          <div className="profile-actions">
            <button id="next-btn" type="submit" className="next-btn">
              Ê¨°„Å∏Ôºö„Éõ„É©„ÉºÂ•Ω„ÅøË®≠ÂÆö
            </button>
          </div>
        </form>
      </div>
      
      <script dangerouslySetInnerHTML={{
        __html: `function validateBirthDate(d){if(!d||d.length!==8||!/^\\d{8}$/.test(d))return'ÁîüÂπ¥ÊúàÊó•„ÅØ8Ê°Å„ÅÆÊï∞Â≠ó„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ';const y=parseInt(d.substring(0,4)),m=parseInt(d.substring(4,6)),day=parseInt(d.substring(6,8));if(y<1920)return'ÁîüÂπ¥ÊúàÊó•„ÅÆÂπ¥„ÅØ1920Âπ¥‰ª•Èôç„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ';if(m<1||m>12)return'ÁîüÂπ¥ÊúàÊó•„ÅÆÊúà„ÅØ01„Åã„Çâ12„ÅÆÈñì„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ';const dm=new Date(y,m,0).getDate();if(day<1||day>dm)return y+'Âπ¥'+m+'Êúà„ÅÆÊó•„ÅØ01„Åã„Çâ'+String(dm).padStart(2,'0')+'„ÅÆÈñì„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ';const id=new Date(y,m-1,day),td=new Date(),age=td.getFullYear()-id.getFullYear(),md=td.getMonth()-id.getMonth(),dd=td.getDate()-id.getDate(),aa=md<0||(md===0&&dd<0)?age-1:age;return aa<18?'18Ê≠≥‰ª•‰∏ä„ÅÆÊñπ„ÅÆ„Åø„ÅîÂà©Áî®„ÅÑ„Åü„Å†„Åë„Åæ„Åô':null}document.addEventListener('DOMContentLoaded',function(){const bi=document.getElementById('birth-date-input'),nb=document.getElementById('next-btn'),f=document.getElementById('profile-form');let ee=null;function se(m){ee&&ee.remove();ee=document.createElement('div');ee.className='birth-date-error';ee.textContent=m;ee.style.color='#d32f2f';ee.style.fontSize='0.75rem';ee.style.marginTop='4px';ee.style.textAlign='left';bi.parentNode.appendChild(ee)}function he(){ee&&(ee.remove(),ee=null)}function ubs(){const e=validateBirthDate(bi.value);e?(se(e),nb.disabled=true,nb.style.opacity='0.5',nb.style.cursor='not-allowed'):(he(),nb.disabled=false,nb.style.opacity='1',nb.style.cursor='pointer')}bi.addEventListener('input',ubs);bi.addEventListener('blur',ubs);f.addEventListener('submit',function(e){const er=validateBirthDate(bi.value);er&&(e.preventDefault(),se(er),nb.disabled=true,nb.style.opacity='0.5',nb.style.cursor='not-allowed')});ubs()});`
      }} />
    </div>
  )
})

// Manual login test page
app.get('/manual-test', (c) => {
  return c.html(`
    <!DOCTYPE html>
    <html lang="ja">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Manual Login Test</title>
        <script src="https://cdn.tailwindcss.com"></script>
    </head>
    <body class="bg-gray-100 p-8">
        <div class="max-w-4xl mx-auto bg-white p-6 rounded-lg shadow">
            <h1 class="text-2xl font-bold mb-4">Manual Login & Feed Test</h1>
            
            <div class="mb-4 space-y-2">
                <button onclick="testStep1()" class="w-full bg-blue-500 text-white p-3 rounded hover:bg-blue-600">
                    Step 1: Set Authentication Cookies
                </button>
                <button onclick="testStep2()" class="w-full bg-green-500 text-white p-3 rounded hover:bg-green-600">
                    Step 2: Test Feed API
                </button>
                <button onclick="testStep3()" class="w-full bg-yellow-500 text-white p-3 rounded hover:bg-yellow-600">
                    Step 3: Initialize FeedManager Manually
                </button>
                <button onclick="testStep4()" class="w-full bg-purple-500 text-white p-3 rounded hover:bg-purple-600">
                    Step 4: Go to Main Page
                </button>
            </div>
            
            <div id="log" class="bg-gray-800 text-green-400 p-4 rounded h-96 overflow-y-auto font-mono text-sm"></div>
        </div>
        
        <script>
            function log(message) {
                const logDiv = document.getElementById('log');
                const timestamp = new Date().toLocaleTimeString();
                logDiv.innerHTML += '[' + timestamp + '] ' + message + '\\n';
                logDiv.scrollTop = logDiv.scrollHeight;
            }
            
            function testStep1() {
                log('=== STEP 1: Setting Authentication Cookies ===');
                
                // Set cookies with various configurations
                document.cookie = 'horror_auth=authenticated; path=/; max-age=604800'; // 7 days
                document.cookie = 'current_user=admin; path=/; max-age=604800'; // 7 days
                
                log('Cookies set via JavaScript');
                log('Current cookies: ' + document.cookie);
                
                // Verify cookies are set
                const hasAuth = document.cookie.includes('horror_auth=authenticated');
                const hasUser = document.cookie.includes('current_user=admin');
                
                log('Auth cookie present: ' + hasAuth);
                log('User cookie present: ' + hasUser);
                
                if (hasAuth && hasUser) {
                    log('‚úÖ Step 1 SUCCESSFUL - Cookies are set correctly');
                } else {
                    log('‚ùå Step 1 FAILED - Cookies not set properly');
                }
            }
            
            async function testStep2() {
                log('=== STEP 2: Testing Feed API ===');
                
                try {
                    const response = await fetch('/api/feed', {
                        credentials: 'same-origin',
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        }
                    });
                    
                    log('Feed API status: ' + response.status);
                    
                    if (response.ok) {
                        const data = await response.json();
                        log('‚úÖ Feed API SUCCESS');
                        log('Posts received: ' + data.posts.length);
                        log('Current user: ' + JSON.stringify(data.currentUser));
                        
                        if (data.posts.length > 0) {
                            log('First post: ' + data.posts[0].content);
                        }
                    } else {
                        const text = await response.text();
                        log('‚ùå Feed API FAILED: ' + text);
                    }
                } catch (error) {
                    log('‚ùå Feed API ERROR: ' + error.message);
                }
            }
            
            async function testStep3() {
                log('=== STEP 3: Manual FeedManager Initialization ===');
                
                // Check if FeedManager class is available
                if (typeof window.FeedManager !== 'undefined') {
                    log('‚úÖ FeedManager class is available');
                    
                    try {
                        // Create FeedManager instance manually
                        log('Creating FeedManager instance...');
                        const feedManager = new window.FeedManager();
                        window.testFeedManager = feedManager;
                        
                        log('‚úÖ FeedManager instance created successfully');
                        log('FeedManager initialized: ' + feedManager.initialized);
                        
                        // Wait a bit then check if it loaded feed
                        setTimeout(() => {
                            log('Checking feed load status...');
                            log('Posts loaded: ' + (feedManager.posts ? feedManager.posts.length : 'none'));
                            
                            if (feedManager.posts && feedManager.posts.length > 0) {
                                log('‚úÖ Feed loaded successfully with ' + feedManager.posts.length + ' posts');
                            } else {
                                log('‚ö†Ô∏è No posts loaded yet, this is expected if authentication timing is off');
                            }
                        }, 3000);
                        
                    } catch (error) {
                        log('‚ùå FeedManager creation failed: ' + error.message);
                    }
                } else {
                    log('‚ùå FeedManager class not available. Loading scripts...');
                    
                    // Load the required scripts
                    const script1 = document.createElement('script');
                    script1.src = '/static/app-manager.js?v=6';
                    document.head.appendChild(script1);
                    
                    const script2 = document.createElement('script');
                    script2.src = '/static/feed-optimized.js?v=9';
                    document.head.appendChild(script2);
                    
                    log('Scripts loading... Please wait and try Step 3 again in a few seconds');
                }
            }
            
            function testStep4() {
                log('=== STEP 4: Redirecting to Main Page ===');
                log('Current cookies: ' + document.cookie);
                log('Redirecting in 2 seconds...');
                
                setTimeout(() => {
                    window.location.href = '/';
                }, 2000);
            }
            
            // Auto-run on page load
            window.onload = function() {
                log('Manual Login Test Page Loaded');
                log('Current cookies: ' + document.cookie);
                log('Ready to test! Click Step 1 to begin.');
            };
        </script>
    </body>
    </html>
  `)
})

// API test page (for debugging)
app.get('/test-api', (c) => {
  return c.html(`
    <!DOCTYPE html>
    <html>
    <head>
        <title>API Test</title>
    </head>
    <body>
        <h1>API Test & Cookie Debug</h1>
        <div style="margin-bottom: 20px;">
            <h3>Basic Tests</h3>
            <button onclick="testDebugAPI()">Test Debug API</button>
            <button onclick="checkCookies()">Check Cookies</button>
            <button onclick="clearResult()">Clear Results</button>
        </div>
        
        <div style="margin-bottom: 20px;">
            <h3>Login Tests</h3>
            <button onclick="loginWithAPI()">Login with API (19861225)</button>
            <button onclick="loginWithDebugUser()">Login with Debug User</button>
            <button onclick="loginAndTest()">Form Login then Test</button>
        </div>
        
        <div style="margin-bottom: 20px;">
            <h3>Authentication Tests</h3>
            <button onclick="testFeedAPI()">Test Feed API</button>
            <button onclick="testAllAPIs()">Test All APIs</button>
            <button onclick="testManagerInitialization()">Test Manager Initialization</button>
        </div>
        
        <div id="result" style="margin-top: 20px; white-space: pre-wrap; background: #f0f0f0; padding: 10px; border: 1px solid #ccc; min-height: 200px;"></div>
        
        <script>
            function log(message) {
                const result = document.getElementById('result');
                result.textContent += new Date().toISOString() + ': ' + message + '\\n';
            }
            
            function clearResult() {
                document.getElementById('result').textContent = '';
            }
            
            async function testDebugAPI() {
                log('Testing debug API...');
                try {
                    const response = await fetch('/api/debug/status', {
                        credentials: 'same-origin'
                    });
                    const data = await response.json();
                    log('Debug API Response: ' + JSON.stringify(data, null, 2));
                } catch (error) {
                    log('Debug API Error: ' + error.message);
                }
            }
            
            async function checkCookies() {
                log('Checking cookies...');
                
                // Check document.cookie
                log('Document cookies: ' + document.cookie);
                
                // Check via API
                try {
                    const response = await fetch('/api/debug/cookies', {
                        credentials: 'same-origin'
                    });
                    const data = await response.json();
                    log('Cookie API Response: ' + JSON.stringify(data, null, 2));
                } catch (error) {
                    log('Cookie API Error: ' + error.message);
                }
            }
            
            async function loginWithAPI() {
                log('Logging in with API...');
                try {
                    const response = await fetch('/api/debug/login', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ password: '19861225' }),
                        credentials: 'same-origin'
                    });
                    
                    const data = await response.json();
                    log('API Login Response: ' + JSON.stringify(data, null, 2));
                    
                    // Check cookies after login
                    await new Promise(resolve => setTimeout(resolve, 500));
                    await checkCookies();
                    
                } catch (error) {
                    log('API Login Error: ' + error.message);
                }
            }
            
            async function testFeedAPI() {
                log('Testing feed API...');
                try {
                    const response = await fetch('/api/feed', {
                        credentials: 'same-origin'
                    });
                    
                    log('Feed API Response Status: ' + response.status);
                    log('Feed API Response Headers: ' + JSON.stringify([...response.headers.entries()]));
                    
                    if (response.ok) {
                        const data = await response.json();
                        log('Feed API Response: ' + JSON.stringify(data, null, 2));
                    } else {
                        const text = await response.text();
                        log('Feed API Error Response: ' + text.substring(0, 200) + '...');
                    }
                } catch (error) {
                    log('Feed API Error: ' + error.message);
                }
            }
            
            async function loginWithDebugUser() {
                log('Logging in with debug user...');
                try {
                    const formData = new FormData();
                    formData.append('userid', 'debug_user1');
                    formData.append('password', 'password123');
                    
                    const loginResponse = await fetch('/welcome-login', {
                        method: 'POST',
                        body: formData,
                        credentials: 'same-origin',
                        redirect: 'manual'
                    });
                    
                    log('Debug User Login Response Status: ' + loginResponse.status);
                    
                    // Check cookies after login
                    await new Promise(resolve => setTimeout(resolve, 500));
                    await checkCookies();
                    
                } catch (error) {
                    log('Debug User Login Error: ' + error.message);
                }
            }
            
            async function testAllAPIs() {
                log('Testing all APIs...');
                const apis = ['/api/feed', '/api/matches', '/api/boards', '/api/events', '/api/identity-verification'];
                
                for (const api of apis) {
                    try {
                        const response = await fetch(api, { credentials: 'same-origin' });
                        if (response.ok) {
                            const data = await response.json();
                            log('‚úì ' + api + ': ' + response.status + ' - ' + JSON.stringify(data).substring(0, 100) + '...');
                        } else {
                            log('‚úó ' + api + ': ' + response.status + ' - ' + (await response.text()).substring(0, 100) + '...');
                        }
                    } catch (error) {
                        log('! ' + api + ': Error - ' + error.message);
                    }
                }
            }
            
            async function testManagerInitialization() {
                log('Testing manager initialization...');
                
                // Trigger authentication event
                log('Dispatching authentication ready event...');
                window.dispatchEvent(new CustomEvent('authenticationReady', { 
                    detail: { authenticated: true } 
                }));
                
                // Wait for managers to initialize
                await new Promise(resolve => setTimeout(resolve, 2000));
                
                // Check window objects
                const managers = ['FeedManager', 'MatchManager', 'BoardManager', 'EventManager', 'DMManager', 'BookmarkManager', 'ProfileManager'];
                managers.forEach(manager => {
                    if (window[manager]) {
                        log('‚úì ' + manager + ': Available');
                    } else {
                        log('‚úó ' + manager + ': Not available');
                    }
                });
            }

            async function loginAndTest() {
                log('Logging in with form...');
                try {
                    const formData = new FormData();
                    formData.append('password', '19861225');
                    
                    const loginResponse = await fetch('/welcome-login', {
                        method: 'POST',
                        body: formData,
                        credentials: 'same-origin',
                        redirect: 'manual'
                    });
                    
                    log('Form Login Response Status: ' + loginResponse.status);
                    log('Form Login Response Type: ' + loginResponse.type);
                    
                    // Check cookies after login
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    await checkCookies();
                    
                    // Test manager initialization
                    await testManagerInitialization();
                    
                    // Test all APIs after login
                    await testAllAPIs();
                    
                } catch (error) {
                    log('Form Login Error: ' + error.message);
                }
            }
        </script>
    </body>
    </html>
  `)
})

// Test login page (temporary for debugging)
app.get('/test-login', (c) => {
  return c.html(`
    <!DOCTYPE html>
    <html>
    <head>
        <title>Test Login</title>
    </head>
    <body>
        <h1>Test Login</h1>
        <form id="loginForm" action="/welcome-login" method="POST">
            <input type="hidden" name="password" value="19861225">
            <button type="submit">Admin Login</button>
        </form>
        
        <div id="result"></div>
        
        <script>
            document.getElementById('loginForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const formData = new FormData();
                formData.append('password', '19861225');
                
                try {
                    const response = await fetch('/welcome-login', {
                        method: 'POST',
                        body: formData,
                        credentials: 'same-origin'
                    });
                    
                    console.log('Login response:', response.status);
                    
                    if (response.redirected) {
                        console.log('Redirected to:', response.url);
                        window.location.href = response.url;
                    } else {
                        const text = await response.text();
                        document.getElementById('result').innerHTML = text;
                    }
                } catch (error) {
                    console.error('Login error:', error);
                    document.getElementById('result').innerHTML = 'Error: ' + error.message;
                }
            });
        </script>
    </body>
    </html>
  `)
})

// Welcome page (no password protection)
app.get('/welcome', (c) => {
  return c.render(
    <div className="page-with-header">
      <AppHeader showLogout={false} />
      <div className="welcome-page">
        {/* Main Title */}
        <h1 className="main-title">
          „Éõ„É©„ÉºÂ•Ω„Åç„ÅÆ„Åü„ÇÅ„ÅÆ<br />Web„Ç¢„Éó„É™
        </h1>
        
        {/* Description Text */}
        <p className="description-text">
          Âêå„Åò„Éõ„É©„Éº„ÅÆË∂£Âë≥„ÇíÊåÅ„Å§‰ª≤Èñì„Å®Áπã„Åå„Çç„ÅÜ„ÄÇ„ÅÇ„Å™„Åü„ÅÆÂ•Ω„Åø„Å´Âêà„Å£„Åü‰∫∫„Å®„Éû„ÉÉ„ÉÅ„Åó„Å¶„ÄÅ„Ç§„Éô„É≥„ÉàÊÉÖÂ†±„ÇÑÊÄñ„ÅÑË©±„ÇíÂÖ±Êúâ„Åó„Çà„ÅÜ„ÄÇ
        </p>
        
        {/* Login Form */}
        <form className="welcome-login-form" method="POST" action="/welcome-login">
          <div className="welcome-input-group">
            <input 
              type="text" 
              name="userid" 
              placeholder="„É¶„Éº„Ç∂„ÉºID" 
              className="welcome-input"
              required
            />
          </div>
          <div className="welcome-input-group">
            <input 
              type="password" 
              name="password" 
              placeholder="„Éë„Çπ„ÉØ„Éº„Éâ" 
              className="welcome-input"
              required
            />
          </div>
          <button type="submit" className="welcome-login-btn">„É≠„Ç∞„Ç§„É≥</button>
        </form>
        
        {/* Register Button */}
        <div className="welcome-register">
          <a href="/register" className="welcome-register-btn">ÂàùÂõûÁôªÈå≤</a>
        </div>
      </div>
    </div>
  )
})

// Welcome page login handler
app.post('/welcome-login', async (c) => {
  const formData = await c.req.formData()
  const userid = formData.get('userid')?.toString()
  const password = formData.get('password')?.toString()
  
  console.log(`[DEBUG] Login attempt: userid="${userid}", password="${password ? '***' : 'empty'}"`)
  console.log(`[DEBUG] Admin check: userid=="${userid}"==="admin"? ${userid === 'admin'}`)
  console.log(`[DEBUG] Admin check: password=="${password}"==="19861225"? ${password === '19861225'}`)
  
  // ÁÆ°ÁêÜËÄÖ„É≠„Ç∞„Ç§„É≥ÔºàÂ∞ÇÁî®ID„Éª„Éë„Çπ„ÉØ„Éº„ÉâÔºâ
  if (userid === 'admin' && password === '19861225') {
    console.log('[DEBUG] Admin login successful, setting cookies and redirecting')
    setSecureCookie(c, 'horror_auth', 'authenticated', {
      maxAge: 60 * 60 * 24, // 24 hours
      httpOnly: false, // Allow JavaScript access for debugging
      path: '/'
    })
    setSecureCookie(c, 'current_user', 'admin', {
      maxAge: 60 * 60 * 24,
      httpOnly: false, // Allow JavaScript access for debugging  
      path: '/'
    })
    return c.redirect('/')
  }
  
  console.log('[DEBUG] Admin login failed, proceeding to user login check')
  
  // „É¶„Éº„Ç∂„Éº„É≠„Ç∞„Ç§„É≥Ë™çË®º
  if (userid && password) {
    try {
      // „Éá„Éº„Çø„Éô„Éº„Çπ„Åã„Çâ„É¶„Éº„Ç∂„ÉºË™çË®º
      const stmt = (c.env as any).DB.prepare('SELECT userid, password, display_name FROM users WHERE userid = ?')
      const user = await stmt.bind(userid).first()
      
      if (user && user.password === password) {
        // ÊúÄÁµÇ„É≠„Ç∞„Ç§„É≥ÊôÇÂàª„ÇíÊõ¥Êñ∞
        const updateStmt = (c.env as any).DB.prepare('UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE userid = ?')
        await updateStmt.bind(userid).run()
        
        setSecureCookie(c, 'horror_auth', 'authenticated', {
          maxAge: 60 * 60 * 24 * 30, // 30 days
          httpOnly: false, // Allow JavaScript access for debugging
          path: '/'
        })
        setSecureCookie(c, 'current_user', JSON.stringify({
          userid: user.userid,
          displayName: user.display_name
        }), {
          maxAge: 60 * 60 * 24 * 30,
        httpOnly: false, // Allow JavaScript access for debugging
        path: '/'
      })
      
      // „É≠„Ç∞„Ç§„É≥ÊàêÂäüÊôÇ„Å´„Éá„Éº„Çø‰øùÂ≠òÔºàÈùûÂêåÊúüÔºâ
      saveUserData().catch(err => console.error('Save failed:', err))
      
        return c.redirect('/')
      }
    } catch (error) {
      console.error('Login database error:', error)
    }
  }
  
  // „É≠„Ç∞„Ç§„É≥Â§±ÊïóÊôÇ„ÅØ„Ç¶„Çß„É´„Ç´„É†„Éö„Éº„Ç∏„Å´„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏‰ªò„Åç„ÅßÊàª„Çã
  return c.render(
    <div className="page-with-header">
      <AppHeader showLogout={false} />
      <div className="welcome-page">
        {/* Main Title */}
        <h1 className="main-title">
          „Éõ„É©„ÉºÂ•Ω„Åç„ÅÆ„Åü„ÇÅ„ÅÆ<br />Web„Ç¢„Éó„É™
        </h1>
        
        {/* Description Text */}
        <p className="description-text">
          Âêå„Åò„Éõ„É©„Éº„ÅÆË∂£Âë≥„ÇíÊåÅ„Å§‰ª≤Èñì„Å®Áπã„Åå„Çç„ÅÜ„ÄÇ„ÅÇ„Å™„Åü„ÅÆÂ•Ω„Åø„Å´Âêà„Å£„Åü‰∫∫„Å®„Éû„ÉÉ„ÉÅ„Åó„Å¶„ÄÅ„Ç§„Éô„É≥„ÉàÊÉÖÂ†±„ÇÑÊÄñ„ÅÑË©±„ÇíÂÖ±Êúâ„Åó„Çà„ÅÜ„ÄÇ
        </p>
        
        {/* Error Message */}
        <div className="welcome-error-message">ID„Åæ„Åü„ÅØ„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÈñìÈÅï„Å£„Å¶„ÅÑ„Åæ„Åô</div>
        
        {/* Login Form */}
        <form className="welcome-login-form" method="POST" action="/welcome-login">
          <div className="welcome-input-group">
            <input 
              type="text" 
              name="userid" 
              placeholder="„É¶„Éº„Ç∂„ÉºID" 
              className="welcome-input"
              required
            />
          </div>
          <div className="welcome-input-group">
            <input 
              type="password" 
              name="password" 
              placeholder="„Éë„Çπ„ÉØ„Éº„Éâ" 
              className="welcome-input"
              required
            />
          </div>
          <button type="submit" className="welcome-login-btn">„É≠„Ç∞„Ç§„É≥</button>
        </form>
        
        {/* Register Button */}
        <div className="welcome-register">
          <a href="/register" className="welcome-register-btn">ÂàùÂõûÁôªÈå≤</a>
        </div>
      </div>
    </div>
  )
})





// Protected main page
app.get('/', passwordProtection, (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const currentUser = users.get(currentUserId)
  
  return c.render(
    <div className="authenticated-body">
      <AppHeader showLogout={true} currentUser={currentUser} />
      <div className="main-container">
        
        {/* Tab Content Areas */}
        <div className="tab-content">
          
          {/* „Éï„Ç£„Éº„Éâ„Çø„Éñ */}
          <div id="feed-tab" className="tab-panel active">
            <div className="tab-header">
              <h2 className="tab-title">„Éï„Ç£„Éº„Éâ</h2>
            </div>
            <div className="content-area">
              
              {/* Ëá™ÂàÜ„ÅÆÊäïÁ®ø‰ΩúÊàêÊ¨Ñ */}
              <div className="post-composer">
                <div className="composer-header">
                  <div className="user-avatar">
                    <div className="avatar-placeholder"></div>
                  </div>
                  <div className="user-info">
                    <span className="display-name" id="composer-display-name">Loading...</span>
                  </div>
                </div>
                <div className="composer-input-area">
                  <textarea 
                    id="post-content" 
                    className="post-input" 
                    placeholder="„ÅÑ„Åæ„ÅÆ„Åì„Å®„ÄÇÊÄñ„Åã„Å£„Åü„Åì„Å®„ÄÇ"
                    maxLength="500"
                    rows="2"
                  ></textarea>
                  <input 
                    type="file" 
                    id="image-file-input" 
                    accept="image/*" 
                    style="display: none;"
                  />
                  <div id="image-preview" className="image-preview" style="display: none;">
                    <img id="preview-img" className="preview-img" />
                    <button type="button" id="remove-image-btn" className="remove-image-btn">√ó</button>
                  </div>
                </div>
                <div className="composer-actions">
                  <button type="button" id="image-attach-btn" className="image-attach-btn" title="ÁîªÂÉè„ÇíÊ∑ª‰ªò">
                    üì∑
                  </button>
                  <button type="button" id="post-submit-btn" className="post-submit-btn">ÊäïÁ®ø</button>
                </div>
              </div>
              
              {/* „Éï„Ç£„Éº„ÉâÊäïÁ®ø„É™„Çπ„Éà */}
              <div id="feed-posts" className="feed-posts">
                {/* ÊäïÁ®ø„ÅØÂãïÁöÑ„Å´ÁîüÊàê */}
                <div className="loading-placeholder">
                  <p>„Éï„Ç£„Éº„Éâ„ÇíË™≠„ÅøËæº„Åø‰∏≠...</p>
                </div>
              </div>
              
            </div>
          </div>
          
          {/* „Éû„ÉÅ„Çø„Éñ */}
          <div id="match-tab" className="tab-panel">
            <div className="tab-header">
              <h2 className="tab-title">„Éû„ÉÉ„ÉÅ„Åó„Åü‰∫∫</h2>
            </div>
            <div className="content-area" id="match-content">
              <div className="loading-placeholder">
                „Éû„ÉÉ„ÉÅ„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø‰∏≠...
              </div>
            </div>
          </div>
          
          {/* „Ç§„Éô„Çø„Éñ */}
          <div id="event-tab" className="tab-panel">
            <div className="tab-header">
              <h2 className="tab-title">„É™„Ç¢„É´„Ç§„Éô„É≥„Éà</h2>
            </div>
            <div className="content-area" id="event-content">
              
              {/* Êñ∞„Åó„ÅÑ„Ç§„Éô„É≥„Éà„Çí‰ΩúÊàê */}
              <div className="event-creator">
                <h3 className="creator-title">Êñ∞„Åó„ÅÑ„Ç§„Éô„É≥„Éà„Çí‰ΩúÊàê</h3>
                <div className="creator-form">
                  <div className="input-group">
                    <label className="input-label">„Ç§„Éô„É≥„ÉàÊó•</label>
                    <input type="date" id="event-date-input" className="event-date-input" required />
                  </div>
                  <div className="input-group">
                    <label className="input-label">ÂÜÖÂÆπ</label>
                    <textarea id="event-content-input" className="event-content-input" placeholder="„Ç§„Éô„É≥„Éà„ÅÆË©≥Á¥∞„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ..." maxLength="1000" required></textarea>
                  </div>
                  <div className="input-group">
                    <label className="input-label">ÂãüÈõÜ‰∫∫Êï∞</label>
                    <input type="number" id="event-capacity-input" className="event-capacity-input" placeholder="ÂãüÈõÜ‰∫∫Êï∞" min="1" max="100" required />
                  </div>
                  <div className="input-group">
                    <label className="input-label">ÂèÇËÄÉ„É™„É≥„ÇØ(‰ªªÊÑè)</label>
                    <input type="url" id="event-reference-link-input" className="event-reference-link-input" placeholder="https://example.com (‰ªªÊÑè)" />
                  </div>
                  <div className="creator-actions">
                    <button id="event-create-btn" className="event-create-btn">„Ç§„Éô„É≥„Éà‰ΩúÊàê</button>
                  </div>
                </div>
              </div>
              
              {/* „Ç§„Éô„É≥„Éà‰∏ÄË¶ß */}
              <div id="events-list" className="events-list">
                <div className="loading-placeholder">„Ç§„Éô„É≥„Éà„ÇíË™≠„ÅøËæº„Åø‰∏≠...</div>
              </div>
              
            </div>
          </div>
          
          {/* Êú¨‰∫∫Ë™çË®ºÁîªÈù¢Ôºà„É¢„Éº„ÉÄ„É´Ôºâ */}
          <div id="identity-verification-modal" className="identity-modal" style="display: none;">
            <div className="identity-modal-content">
              <div className="identity-modal-header">
                <h3 className="identity-modal-title">Êú¨‰∫∫Ë™çË®º„ÅåÂøÖË¶Å„Åß„Åô</h3>
                <button id="identity-modal-close" className="identity-modal-close">&times;</button>
              </div>
              <div className="identity-modal-body">
                <p className="identity-explanation">
                  „É™„Ç¢„É´„Ç§„Éô„É≥„ÉàÊ©üËÉΩ„Çí„ÅîÂà©Áî®„ÅÑ„Åü„Å†„Åè„Å´„ÅØ„ÄÅÊú¨‰∫∫Ë™çË®º„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ<br/>
                  Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°ûÔºàÈÅãËª¢ÂÖçË®±Ë®º„ÄÅ„Éû„Ç§„Éä„É≥„Éê„Éº„Ç´„Éº„Éâ„ÄÅ„Éë„Çπ„Éù„Éº„Éà„Å™„Å©Ôºâ„ÅÆÂÜôÁúü„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
                </p>
                <div className="identity-upload-area">
                  <input type="file" id="identity-document-input" accept="image/*" style="display: none;" />
                  <div id="identity-upload-zone" className="identity-upload-zone">
                    <div className="identity-upload-icon">üì∑</div>
                    <p className="identity-upload-text">Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û„ÅÆÂÜôÁúü„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ</p>
                    <p className="identity-upload-note">JPG, PNGÂΩ¢Âºè (ÊúÄÂ§ß5MB)</p>
                  </div>
                  <div id="identity-preview-area" className="identity-preview-area" style="display: none;">
                    <img id="identity-preview-image" className="identity-preview-image" alt="Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û„Éó„É¨„Éì„É•„Éº" />
                    <button id="identity-remove-image" className="identity-remove-image">ÂâäÈô§</button>
                  </div>
                </div>
                <div className="identity-modal-actions">
                  <button id="identity-submit-btn" className="identity-submit-btn" disabled>Êú¨‰∫∫Ë™çË®º„ÇíÁî≥Ë´ã</button>
                </div>
              </div>
            </div>
          </div>
          
          {/* Êé≤Á§∫Êùø„Çø„Éñ */}
          <div id="board-tab" className="tab-panel">
            <div className="tab-header">
              <h2 className="tab-title">Êé≤Á§∫Êùø</h2>
            </div>
            <div className="content-area" id="board-content">
              {/* Êé≤Á§∫Êùø‰∏ÄË¶ßË°®Á§∫ */}
              <div id="board-list-view">
                {/* Êñ∞Ë¶èÊé≤Á§∫Êùø‰ΩúÊàêÊ¨Ñ */}
                <div className="board-creator">
                  <h3 className="creator-title">Êñ∞„Åó„ÅÑÊé≤Á§∫Êùø„Çí‰ΩúÊàê</h3>
                  <div className="creator-form">
                    <input type="text" id="board-title-input" className="board-title-input" placeholder="Êé≤Á§∫Êùø„ÅÆ„Çø„Ç§„Éà„É´„ÇíÂÖ•Âäõ..." maxLength="100" />
                    <textarea id="board-content-input" className="board-content-input" placeholder="ÊúÄÂàù„ÅÆÊäïÁ®øÂÜÖÂÆπ„ÇíÂÖ•Âäõ..." maxLength="1000"></textarea>
                    <div className="creator-actions">
                      <input type="file" id="board-image-input" accept="image/*" style="display: none;" />
                      <button id="board-image-btn" className="image-attach-btn">üì∑</button>
                      <div id="board-image-preview" className="image-preview" style="display: none;">
                        <img id="board-preview-img" className="preview-img" alt="„Éó„É¨„Éì„É•„Éº" />
                        <button id="board-remove-image" className="remove-image-btn">&times;</button>
                      </div>
                      <button id="board-create-btn" className="board-create-btn">Êé≤Á§∫Êùø‰ΩúÊàê</button>
                    </div>
                  </div>
                </div>
                
                {/* Êé≤Á§∫Êùø‰∏ÄË¶ß */}
                <div id="boards-list" className="boards-list">
                  <div className="loading-placeholder">Êé≤Á§∫Êùø„ÇíË™≠„ÅøËæº„Åø‰∏≠...</div>
                </div>
              </div>
              
              {/* ÂÄãÂà•Êé≤Á§∫ÊùøË°®Á§∫ */}
              <div id="board-detail-view" style="display: none;">
                <div className="board-detail-header">
                  <button id="back-to-list-btn" className="back-btn">‚Üê Êé≤Á§∫Êùø‰∏ÄË¶ß„Å´Êàª„Çã</button>
                  <h3 id="board-detail-title" className="board-detail-title"></h3>
                </div>
                <div id="board-posts" className="board-posts">
                  <div className="loading-placeholder">ÊäïÁ®ø„ÇíË™≠„ÅøËæº„Åø‰∏≠...</div>
                </div>
                <div id="collapse-toggle" className="collapse-toggle" style="display: none;">
                  <button id="toggle-old-posts-btn" className="toggle-btn">Âè§„ÅÑÊäïÁ®ø„ÇíË°®Á§∫/ÈùûË°®Á§∫</button>
                </div>
              </div>
            </div>
          </div>
          
          {/* DM„Çø„Éñ */}
          <div id="dm-tab" className="tab-panel">
            <div className="tab-header">
              <h2 className="tab-title">DM</h2>
            </div>
            <div className="content-area" id="dm-content">
              
              {/* Êú¨‰∫∫Ë™çË®ºÊ°àÂÜÖÁîªÈù¢ */}
              <div id="dm-identity-prompt" className="dm-identity-prompt" style="display: none;">
                <div className="identity-prompt-content">
                  <h3 className="identity-prompt-title">„Åì„ÅÆ„Çµ„Éº„Éì„Çπ„ÅÆÂà©Áî®„Å´„ÅØÊú¨‰∫∫Ë™çË®º„ÅåÂøÖË¶Å„Åß„Åô</h3>
                  <p className="identity-prompt-text">
                    DM„Çµ„Éº„Éì„Çπ„ÇíÂÆâÂÖ®„Å´„ÅîÂà©Áî®„ÅÑ„Åü„Å†„Åè„Åü„ÇÅ„Å´„ÄÅÊú¨‰∫∫Ë™çË®º„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ<br/>
                    Êú¨‰∫∫Ë™çË®º„ÇíË°å„ÅÑ„Åæ„Åô„ÅãÔºü
                  </p>
                  <div className="identity-prompt-actions">
                    <button id="dm-identity-yes-btn" className="identity-yes-btn">Êú¨‰∫∫Ë™çË®º„ÇíË°å„ÅÜ</button>
                    <button id="dm-identity-cancel-btn" className="identity-cancel-btn">„Ç≠„É£„É≥„Çª„É´</button>
                  </div>
                </div>
              </div>

              {/* DM‰∏ÄË¶ßÁîªÈù¢ */}
              <div id="dm-conversations-list" className="dm-conversations-list" style="display: none;">
                <div id="dm-conversations-container" className="dm-conversations-container">
                  <div className="loading-placeholder">DMÂ±•Ê≠¥„ÇíË™≠„ÅøËæº„Åø‰∏≠...</div>
                </div>
              </div>

              {/* „Éà„Éº„ÇØÁîªÈù¢ */}
              <div id="dm-chat-view" className="dm-chat-view" style="display: none;">
                <div className="chat-header">
                  <button id="back-to-dm-list-btn" className="back-btn">‚Üê DM‰∏ÄË¶ß„Å´Êàª„Çã</button>
                  <div className="chat-user-info">
                    <img id="chat-user-avatar" className="chat-user-avatar" alt="„É¶„Éº„Ç∂„Éº„Ç¢„Éê„Çø„Éº" />
                    <span id="chat-user-name" className="chat-user-name"></span>
                  </div>
                </div>
                <div id="chat-messages" className="chat-messages">
                  <div className="loading-placeholder">„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË™≠„ÅøËæº„Åø‰∏≠...</div>
                </div>
                <div className="chat-input-area">
                  <div className="chat-input-container">
                    <textarea id="chat-message-input" className="chat-message-input" placeholder="„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂÖ•Âäõ..." maxLength="500"></textarea>
                    <button id="chat-send-btn" className="chat-send-btn">ÈÄÅ‰ø°</button>
                  </div>
                </div>
              </div>

            </div>
          </div>
          
          {/* „Éó„É≠„Éï„Ç£„Éº„É´ÁîªÈù¢Ôºà„É¢„Éº„ÉÄ„É´Ôºâ */}
          <div id="profile-modal" className="profile-modal" style="display: none;">
            <div className="profile-modal-content">
              <div className="profile-modal-header">
                <h3 className="profile-modal-title">„Éó„É≠„Éï„Ç£„Éº„É´</h3>
                <button id="profile-modal-close" className="profile-modal-close">&times;</button>
              </div>
              <div className="profile-modal-body">
                <div id="profile-content" className="profile-content">
                  <div className="loading-placeholder">„Éó„É≠„Éï„Ç£„Éº„É´„ÇíË™≠„ÅøËæº„Åø‰∏≠...</div>
                </div>
                <div className="profile-actions">
                  <button id="profile-send-dm-btn" className="profile-send-dm-btn">DM„ÇíÈÄÅ„Çã</button>
                </div>
              </div>
            </div>
          </div>
          
          {/* „Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„Çø„Éñ */}
          <div id="bookmark-tab" className="tab-panel">
            <div className="tab-header">
              <h2 className="tab-title">„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ</h2>
            </div>
            <div className="content-area" id="bookmark-content">
              
              {/* „Ç´„ÉÜ„Ç¥„É™„Éï„Ç£„É´„Çø„Éº */}
              <div className="bookmark-filters">
                <button id="bookmark-filter-all" className="filter-btn active" data-type="all">„Åô„Åπ„Å¶</button>
                <button id="bookmark-filter-feed" className="filter-btn" data-type="feed">„Éï„Ç£„Éº„Éâ</button>
                <button id="bookmark-filter-event" className="filter-btn" data-type="event">„Ç§„Éô„É≥„Éà</button>
                <button id="bookmark-filter-board" className="filter-btn" data-type="board">Êé≤Á§∫Êùø</button>
              </div>
              
              {/* „Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ‰∏ÄË¶ß */}
              <div id="bookmarks-list" className="bookmarks-list">
                <div className="loading-placeholder">„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„ÇíË™≠„ÅøËæº„Åø‰∏≠...</div>
              </div>
              
            </div>
          </div>
          
        </div>
        
        {/* Board Post Input (shown only in board detail view) */}
        <div id="board-post-input" className="board-post-input" style="display: none;">
          <div className="board-input-container">
            <textarea id="board-post-content" className="board-post-textarea" placeholder="„Åì„ÅÆÊé≤Á§∫Êùø„Å´ÊäïÁ®ø..." maxLength="1000"></textarea>
            <div className="board-input-actions">
              <input type="file" id="board-post-image-input" accept="image/*" style="display: none;" />
              <button id="board-post-image-btn" className="image-attach-btn">üì∑</button>
              <div id="board-post-image-preview" className="image-preview" style="display: none;">
                <img id="board-post-preview-img" className="preview-img" alt="„Éó„É¨„Éì„É•„Éº" />
                <button id="board-post-remove-image" className="remove-image-btn">&times;</button>
              </div>
              <button id="board-post-submit-btn" className="board-post-submit-btn">ÊäïÁ®ø</button>
            </div>
          </div>
        </div>
        
        {/* Bottom Navigation */}
        <nav className="bottom-nav">
          <div className="nav-item active" data-tab="feed">
            <div className="nav-icon feed-icon"></div>
          </div>
          
          <div className="nav-item" data-tab="match">
            <div className="nav-icon match-icon"></div>
          </div>
          
          <div className="nav-item" data-tab="event">
            <div className="nav-icon event-icon"></div>
          </div>
          
          <div className="nav-item" data-tab="board">
            <div className="nav-icon board-icon"></div>
          </div>
          
          <div className="nav-item" data-tab="dm">
            <div className="nav-icon dm-icon"></div>
          </div>
          
          <div className="nav-item" data-tab="bookmark">
            <div className="nav-icon bookmark-tab-icon"></div>
          </div>
        </nav>
        
      </div>
    </div>
  )
})

// Profile setup form handler
app.post('/profile-setup', passwordProtection, async (c) => {
  const formData = await c.req.formData()
  const displayName = formData.get('display_name')?.toString().trim()
  const birthDate = formData.get('birth_date')?.toString().trim()
  const gender = formData.get('gender')?.toString()
  const prefecture = formData.get('prefecture')?.toString()
  const selfIntroduction = formData.get('self_introduction')?.toString().trim() || ''
  
  // ÁîüÂπ¥ÊúàÊó•„Éê„É™„Éá„Éº„Ç∑„Éß„É≥Èñ¢Êï∞
  const validateBirthDate = (dateStr: string) => {
    if (!dateStr || dateStr.length !== 8 || !/^\d{8}$/.test(dateStr)) {
      return 'ÁîüÂπ¥ÊúàÊó•„ÅØ8Ê°Å„ÅÆÊï∞Â≠ó„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ'
    }
    
    const year = parseInt(dateStr.substring(0, 4))
    const month = parseInt(dateStr.substring(4, 6))
    const day = parseInt(dateStr.substring(6, 8))
    
    // Âπ¥„ÅÆÁØÑÂõ≤„ÉÅ„Çß„ÉÉ„ÇØÔºà1920Âπ¥‰ª•ÈôçÔºâ
    if (year < 1920) {
      return 'ÁîüÂπ¥ÊúàÊó•„ÅÆÂπ¥„ÅØ1920Âπ¥‰ª•Èôç„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ'
    }
    
    // Êúà„ÅÆÁØÑÂõ≤„ÉÅ„Çß„ÉÉ„ÇØ
    if (month < 1 || month > 12) {
      return 'ÁîüÂπ¥ÊúàÊó•„ÅÆÊúà„ÅØ01„Åã„Çâ12„ÅÆÈñì„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ'
    }
    
    // Êó•„ÅÆÁØÑÂõ≤„ÉÅ„Çß„ÉÉ„ÇØ
    const daysInMonth = new Date(year, month, 0).getDate()
    if (day < 1 || day > daysInMonth) {
      return `${year}Âπ¥${month}Êúà„ÅÆÊó•„ÅØ01„Åã„Çâ${daysInMonth.toString().padStart(2, '0')}„ÅÆÈñì„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ`
    }
    
    // 18Ê≠≥Êú™Ê∫Ä„ÉÅ„Çß„ÉÉ„ÇØ
    const inputDate = new Date(year, month - 1, day)
    const today = new Date()
    const age = today.getFullYear() - inputDate.getFullYear()
    const monthDiff = today.getMonth() - inputDate.getMonth()
    const dayDiff = today.getDate() - inputDate.getDate()
    
    // Ê≠£Á¢∫„Å™Âπ¥ÈΩ¢Ë®àÁÆóÔºàË™ïÁîüÊó•„ÇíËøé„Åà„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØÔºâ
    const actualAge = monthDiff < 0 || (monthDiff === 0 && dayDiff < 0) ? age - 1 : age
    
    if (actualAge < 18) {
      return '18Ê≠≥‰ª•‰∏ä„ÅÆÊñπ„ÅÆ„Åø„ÅîÂà©Áî®„ÅÑ„Åü„Å†„Åë„Åæ„Åô'
    }
    
    return null // „Ç®„É©„Éº„Å™„Åó
  }
  
  // Âü∫Êú¨„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
  if (!displayName || !birthDate || !gender || !prefecture) {
    return c.render(
      <div className="authenticated-body">
        <AppHeader showLogout={true} />
        <div className="profile-setup-container">
          <h1 className="profile-title">Âü∫Êú¨„Éó„É≠„Éï„Ç£„Éº„É´</h1>
          <div className="error-message">ÂøÖÈ†àÈ†ÖÁõÆ„Çí„Åô„Åπ„Å¶ÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ</div>
          <a href="/profile-setup" className="btn btn-primary">Êàª„Çã</a>
        </div>
      </div>
    )
  }
  
  // ÁîüÂπ¥ÊúàÊó•„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
  const birthDateError = validateBirthDate(birthDate)
  if (birthDateError) {
    return c.render(
      <div className="authenticated-body">
        <AppHeader showLogout={true} />
        <div className="profile-setup-container">
          <h1 className="profile-title">Âü∫Êú¨„Éó„É≠„Éï„Ç£„Éº„É´</h1>
          <div className="error-message">{birthDateError}</div>
          <a href="/profile-setup" className="btn btn-primary">Êàª„Çã</a>
        </div>
      </div>
    )
  }
  
  // ÊÆã„Çä„ÅÆ„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
  if (!displayName || !birthDate || !gender || !prefecture) {
    return c.render(
      <div className="authenticated-body">
        <AppHeader showLogout={true} />
        <div className="profile-setup-container">
          <h1 className="profile-title">Âü∫Êú¨„Éó„É≠„Éï„Ç£„Éº„É´</h1>
          <div className="error-message">ÂøÖÈ†àÈ†ÖÁõÆ„Çí„Åô„Åπ„Å¶ÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ</div>
          <a href="/profile-setup" className="btn btn-primary">Êàª„Çã</a>
        </div>
      </div>
    )
  }
  
  // „Éó„É≠„Éï„Ç£„Éº„É´ÊÉÖÂ†±„Çí„É¶„Éº„Ç∂„Éº„Éá„Éº„Çø„Å´‰øùÂ≠òÔºàÁ∞°ÊòìÂÆüË£ÖÔºâ
  const currentUser = getCookie(c, 'current_user')
  if (currentUser && users.has(currentUser)) {
    const user = users.get(currentUser)
    users.set(currentUser, {
      ...user,
      profile: {
        displayName,
        birthDate,
        gender,
        prefecture,
        selfIntroduction
      }
    })
  }
  
  // „Éõ„É©„ÉºÂ•Ω„ÅøË®≠ÂÆö„Éö„Éº„Ç∏„Å´ÁßªÂãï
  return c.redirect('/horror-preferences')
})

// Horror preferences setup page
app.get('/horror-preferences', passwordProtection, (c) => {
  return c.render(
    <div className="authenticated-body">
      <AppHeader showLogout={true} />
      <div className="horror-preferences-container">
        <h2 className="media-title">Â•Ω„Åç„Å™„Éõ„É©„ÉºÂ™í‰Ωì(Ë§áÊï∞ÂõûÁ≠î)</h2>
        
        <form className="media-selection-form" method="POST" action="/horror-preferences">
          <div className="media-grid">
            <div className="media-option" data-value="Êò†Áîª">
              <input type="checkbox" name="media_types" value="Êò†Áîª" id="media_movie" className="media-checkbox" />
              <label htmlFor="media_movie" className="media-label">Êò†Áîª</label>
            </div>
            
            <div className="media-option" data-value="ÂãïÁîª">
              <input type="checkbox" name="media_types" value="ÂãïÁîª" id="media_video" className="media-checkbox" />
              <label htmlFor="media_video" className="media-label">ÂãïÁîª</label>
            </div>
            
            <div className="media-option" data-value="Èü≥Â£∞">
              <input type="checkbox" name="media_types" value="Èü≥Â£∞" id="media_audio" className="media-checkbox" />
              <label htmlFor="media_audio" className="media-label">Èü≥Â£∞</label>
            </div>
            
            <div className="media-option" data-value="Êõ∏Á±ç">
              <input type="checkbox" name="media_types" value="Êõ∏Á±ç" id="media_book" className="media-checkbox" />
              <label htmlFor="media_book" className="media-label">Êõ∏Á±ç</label>
            </div>
            
            <div className="media-option" data-value="Êº´Áîª">
              <input type="checkbox" name="media_types" value="Êº´Áîª" id="media_manga" className="media-checkbox" />
              <label htmlFor="media_manga" className="media-label">Êº´Áîª</label>
            </div>
            
            <div className="media-option" data-value="„Éç„ÉÉ„Éà/SNSÊäïÁ®ø">
              <input type="checkbox" name="media_types" value="„Éç„ÉÉ„Éà/SNSÊäïÁ®ø" id="media_sns" className="media-checkbox" />
              <label htmlFor="media_sns" className="media-label">„Éç„ÉÉ„Éà/SNSÊäïÁ®ø</label>
            </div>
            
            <div className="media-option" data-value="ÂêÑÁ®Æ„Ç≤„Éº„É†">
              <input type="checkbox" name="media_types" value="ÂêÑÁ®Æ„Ç≤„Éº„É†" id="media_game" className="media-checkbox" />
              <label htmlFor="media_game" className="media-label">ÂêÑÁ®Æ„Ç≤„Éº„É†</label>
            </div>
            
            <div className="media-option" data-value="‰ΩìÊÑüÂûã„Ç§„Éô„É≥„Éà">
              <input type="checkbox" name="media_types" value="‰ΩìÊÑüÂûã„Ç§„Éô„É≥„Éà" id="media_event" className="media-checkbox" />
              <label htmlFor="media_event" className="media-label">‰ΩìÊÑüÂûã„Ç§„Éô„É≥„Éà</label>
            </div>
            
            <div className="media-option" data-value="ÂÆü‰ΩìÈ®ì">
              <input type="checkbox" name="media_types" value="ÂÆü‰ΩìÈ®ì" id="media_experience" className="media-checkbox" />
              <label htmlFor="media_experience" className="media-label">ÂÆü‰ΩìÈ®ì</label>
            </div>
          </div>
          
          <h2 className="genre-title">Â•Ω„Åç„Å™„Éõ„É©„Éº„Ç∏„É£„É≥„É´(Ë§áÊï∞ÂõûÁ≠î)</h2>
          
          <div className="genre-grid">
            <div className="genre-option" data-value="ÊÄ™Ë´á">
              <input type="checkbox" name="genre_types" value="ÊÄ™Ë´á" id="genre_kaidan" className="genre-checkbox" />
              <label htmlFor="genre_kaidan" className="genre-label">ÊÄ™Ë´á</label>
            </div>
            
            <div className="genre-option" data-value="ÊÄ™Ë´áÂ∏´">
              <input type="checkbox" name="genre_types" value="ÊÄ™Ë´áÂ∏´" id="genre_kaidanshi" className="genre-checkbox" />
              <label htmlFor="genre_kaidanshi" className="genre-label">ÊÄ™Ë´áÂ∏´</label>
            </div>
            
            <div className="genre-option" data-value="ÊÄ™Ë´áÊúóË™≠">
              <input type="checkbox" name="genre_types" value="ÊÄ™Ë´áÊúóË™≠" id="genre_kaidan_reading" className="genre-checkbox" />
              <label htmlFor="genre_kaidan_reading" className="genre-label">ÊÄ™Ë´áÊúóË™≠</label>
            </div>
            
            <div className="genre-option" data-value="„ÇÜ„Å£„Åè„ÇäÊÄ™Ë´áÊúóË™≠">
              <input type="checkbox" name="genre_types" value="„ÇÜ„Å£„Åè„ÇäÊÄ™Ë´áÊúóË™≠" id="genre_yukkuri_kaidan" className="genre-checkbox" />
              <label htmlFor="genre_yukkuri_kaidan" className="genre-label">„ÇÜ„Å£„Åè„ÇäÊÄ™Ë´áÊúóË™≠</label>
            </div>
            
            <div className="genre-option" data-value="ÈÉΩÂ∏Ç‰ºùË™¨">
              <input type="checkbox" name="genre_types" value="ÈÉΩÂ∏Ç‰ºùË™¨" id="genre_urban_legend" className="genre-checkbox" />
              <label htmlFor="genre_urban_legend" className="genre-label">ÈÉΩÂ∏Ç‰ºùË™¨</label>
            </div>
            
            <div className="genre-option" data-value="Ê∞ëË©±/‰ºùÊâø">
              <input type="checkbox" name="genre_types" value="Ê∞ëË©±/‰ºùÊâø" id="genre_folklore" className="genre-checkbox" />
              <label htmlFor="genre_folklore" className="genre-label">Ê∞ëË©±/‰ºùÊâø</label>
            </div>
            
            <div className="genre-option" data-value="Âë™Áâ©">
              <input type="checkbox" name="genre_types" value="Âë™Áâ©" id="genre_cursed_object" className="genre-checkbox" />
              <label htmlFor="genre_cursed_object" className="genre-label">Âë™Áâ©</label>
            </div>
            
            <div className="genre-option" data-value="ÂπΩÈúä">
              <input type="checkbox" name="genre_types" value="ÂπΩÈúä" id="genre_ghost" className="genre-checkbox" />
              <label htmlFor="genre_ghost" className="genre-label">ÂπΩÈúä</label>
            </div>
            
            <div className="genre-option" data-value="ÊÇ™È≠î">
              <input type="checkbox" name="genre_types" value="ÊÇ™È≠î" id="genre_demon" className="genre-checkbox" />
              <label htmlFor="genre_demon" className="genre-label">ÊÇ™È≠î</label>
            </div>
            
            <div className="genre-option" data-value="Â¶ñÊÄ™">
              <input type="checkbox" name="genre_types" value="Â¶ñÊÄ™" id="genre_yokai" className="genre-checkbox" />
              <label htmlFor="genre_yokai" className="genre-label">Â¶ñÊÄ™</label>
            </div>
            
            <div className="genre-option" data-value="UMA">
              <input type="checkbox" name="genre_types" value="UMA" id="genre_uma" className="genre-checkbox" />
              <label htmlFor="genre_uma" className="genre-label">UMA</label>
            </div>
            
            <div className="genre-option" data-value="È≠îÂ•≥">
              <input type="checkbox" name="genre_types" value="È≠îÂ•≥" id="genre_witch" className="genre-checkbox" />
              <label htmlFor="genre_witch" className="genre-label">È≠îÂ•≥</label>
            </div>
            
            <div className="genre-option" data-value="„É¢„É≥„Çπ„Çø„Éº/„ÇØ„É™„Éº„ÉÅ„É£„Éº">
              <input type="checkbox" name="genre_types" value="„É¢„É≥„Çπ„Çø„Éº/„ÇØ„É™„Éº„ÉÅ„É£„Éº" id="genre_monster" className="genre-checkbox" />
              <label htmlFor="genre_monster" className="genre-label">„É¢„É≥„Çπ„Çø„Éº/„ÇØ„É™„Éº„ÉÅ„É£„Éº</label>
            </div>
            
            <div className="genre-option" data-value="ÂÆáÂÆô‰∫∫/„É¨„Éó„ÉÜ„Ç£„É™„Ç¢„É≥">
              <input type="checkbox" name="genre_types" value="ÂÆáÂÆô‰∫∫/„É¨„Éó„ÉÜ„Ç£„É™„Ç¢„É≥" id="genre_alien" className="genre-checkbox" />
              <label htmlFor="genre_alien" className="genre-label">ÂÆáÂÆô‰∫∫/„É¨„Éó„ÉÜ„Ç£„É™„Ç¢„É≥</label>
            </div>
            
            <div className="genre-option" data-value="„Éî„Ç®„É≠">
              <input type="checkbox" name="genre_types" value="„Éî„Ç®„É≠" id="genre_clown" className="genre-checkbox" />
              <label htmlFor="genre_clown" className="genre-label">„Éî„Ç®„É≠</label>
            </div>
            
            <div className="genre-option" data-value="„Ç´„É´„Éà">
              <input type="checkbox" name="genre_types" value="„Ç´„É´„Éà" id="genre_cult" className="genre-checkbox" />
              <label htmlFor="genre_cult" className="genre-label">„Ç´„É´„Éà</label>
            </div>
            
            <div className="genre-option" data-value="Áï∞‰∏ñÁïå">
              <input type="checkbox" name="genre_types" value="Áï∞‰∏ñÁïå" id="genre_otherworld" className="genre-checkbox" />
              <label htmlFor="genre_otherworld" className="genre-label">Áï∞‰∏ñÁïå</label>
            </div>
            
            <div className="genre-option" data-value="‰∏çÊÄùË≠∞">
              <input type="checkbox" name="genre_types" value="‰∏çÊÄùË≠∞" id="genre_mystery" className="genre-checkbox" />
              <label htmlFor="genre_mystery" className="genre-label">‰∏çÊÄùË≠∞</label>
            </div>
            
            <div className="genre-option" data-value="‰∫∫ÊÄñ">
              <input type="checkbox" name="genre_types" value="‰∫∫ÊÄñ" id="genre_human_horror" className="genre-checkbox" />
              <label htmlFor="genre_human_horror" className="genre-label">‰∫∫ÊÄñ</label>
            </div>
            
            <div className="genre-option" data-value="Ê¥íËêΩÊÄñ">
              <input type="checkbox" name="genre_types" value="Ê¥íËêΩÊÄñ" id="genre_share_kowai" className="genre-checkbox" />
              <label htmlFor="genre_share_kowai" className="genre-label">Ê¥íËêΩÊÄñ</label>
            </div>
            
            <div className="genre-option" data-value="ÊÑèÂë≥ÊÄñ">
              <input type="checkbox" name="genre_types" value="ÊÑèÂë≥ÊÄñ" id="genre_imi_kowai" className="genre-checkbox" />
              <label htmlFor="genre_imi_kowai" className="genre-label">ÊÑèÂë≥ÊÄñ</label>
            </div>
            
            <div className="genre-option" data-value="SCP">
              <input type="checkbox" name="genre_types" value="SCP" id="genre_scp" className="genre-checkbox" />
              <label htmlFor="genre_scp" className="genre-label">SCP</label>
            </div>
            
            <div className="genre-option" data-value="„Ç∏„É£„É≥„Éó„Çπ„Ç±„Ç¢">
              <input type="checkbox" name="genre_types" value="„Ç∏„É£„É≥„Éó„Çπ„Ç±„Ç¢" id="genre_jump_scare" className="genre-checkbox" />
              <label htmlFor="genre_jump_scare" className="genre-label">„Ç∏„É£„É≥„Éó„Çπ„Ç±„Ç¢</label>
            </div>
            
            <div className="genre-option" data-value="„Éë„Éã„ÉÉ„ÇØ„Çπ„É™„É©„Éº">
              <input type="checkbox" name="genre_types" value="„Éë„Éã„ÉÉ„ÇØ„Çπ„É™„É©„Éº" id="genre_panic_thriller" className="genre-checkbox" />
              <label htmlFor="genre_panic_thriller" className="genre-label">„Éë„Éã„ÉÉ„ÇØ„Çπ„É™„É©„Éº</label>
            </div>
            
            <div className="genre-option" data-value="„Ç¢„Éä„É≠„Ç∞„Éõ„É©„Éº">
              <input type="checkbox" name="genre_types" value="„Ç¢„Éä„É≠„Ç∞„Éõ„É©„Éº" id="genre_analog_horror" className="genre-checkbox" />
              <label htmlFor="genre_analog_horror" className="genre-label">„Ç¢„Éä„É≠„Ç∞„Éõ„É©„Éº</label>
            </div>
            
            <div className="genre-option" data-value="„Çµ„Ç§„Ç≥„Éõ„É©„Éº">
              <input type="checkbox" name="genre_types" value="„Çµ„Ç§„Ç≥„Éõ„É©„Éº" id="genre_psycho_horror" className="genre-checkbox" />
              <label htmlFor="genre_psycho_horror" className="genre-label">„Çµ„Ç§„Ç≥„Éõ„É©„Éº</label>
            </div>
            
            <div className="genre-option" data-value="„Çµ„Çπ„Éö„É≥„Çπ„Éõ„É©„Éº">
              <input type="checkbox" name="genre_types" value="„Çµ„Çπ„Éö„É≥„Çπ„Éõ„É©„Éº" id="genre_suspense_horror" className="genre-checkbox" />
              <label htmlFor="genre_suspense_horror" className="genre-label">„Çµ„Çπ„Éö„É≥„Çπ„Éõ„É©„Éº</label>
            </div>
            
            <div className="genre-option" data-value="„Ç≥„Ç∫„Éü„ÉÉ„ÇØ„Éõ„É©„Éº">
              <input type="checkbox" name="genre_types" value="„Ç≥„Ç∫„Éü„ÉÉ„ÇØ„Éõ„É©„Éº" id="genre_cosmic_horror" className="genre-checkbox" />
              <label htmlFor="genre_cosmic_horror" className="genre-label">„Ç≥„Ç∫„Éü„ÉÉ„ÇØ„Éõ„É©„Éº</label>
            </div>
            
            <div className="genre-option" data-value="„Ç¥„Ç∑„ÉÉ„ÇØ„Éõ„É©„Éº">
              <input type="checkbox" name="genre_types" value="„Ç¥„Ç∑„ÉÉ„ÇØ„Éõ„É©„Éº" id="genre_gothic_horror" className="genre-checkbox" />
              <label htmlFor="genre_gothic_horror" className="genre-label">„Ç¥„Ç∑„ÉÉ„ÇØ„Éõ„É©„Éº</label>
            </div>
            
            <div className="genre-option" data-value="„Éï„Ç©„Éº„ÇØ„Éõ„É©„Éº">
              <input type="checkbox" name="genre_types" value="„Éï„Ç©„Éº„ÇØ„Éõ„É©„Éº" id="genre_folk_horror" className="genre-checkbox" />
              <label htmlFor="genre_folk_horror" className="genre-label">„Éï„Ç©„Éº„ÇØ„Éõ„É©„Éº</label>
            </div>
            
            <div className="genre-option" data-value="SF„Éõ„É©„Éº">
              <input type="checkbox" name="genre_types" value="SF„Éõ„É©„Éº" id="genre_sf_horror" className="genre-checkbox" />
              <label htmlFor="genre_sf_horror" className="genre-label">SF„Éõ„É©„Éº</label>
            </div>
            
            <div className="genre-option" data-value="„Éõ„É©„Éº„Ç≥„É°„Éá„Ç£">
              <input type="checkbox" name="genre_types" value="„Éõ„É©„Éº„Ç≥„É°„Éá„Ç£" id="genre_horror_comedy" className="genre-checkbox" />
              <label htmlFor="genre_horror_comedy" className="genre-label">„Éõ„É©„Éº„Ç≥„É°„Éá„Ç£</label>
            </div>
            
            <div className="genre-option" data-value="„Çπ„É©„ÉÉ„Ç∑„É£„Éº/„Çπ„Éó„É©„ÉÉ„Çø/Gore">
              <input type="checkbox" name="genre_types" value="„Çπ„É©„ÉÉ„Ç∑„É£„Éº/„Çπ„Éó„É©„ÉÉ„Çø/Gore" id="genre_slasher" className="genre-checkbox" />
              <label htmlFor="genre_slasher" className="genre-label">„Çπ„É©„ÉÉ„Ç∑„É£„Éº/„Çπ„Éó„É©„ÉÉ„Çø/Gore</label>
            </div>
            
            <div className="genre-option" data-value="„Éï„Ç°„Ç¶„É≥„Éâ„Éï„ÉÉ„ÉÜ„Éº„Ç∏">
              <input type="checkbox" name="genre_types" value="„Éï„Ç°„Ç¶„É≥„Éâ„Éï„ÉÉ„ÉÜ„Éº„Ç∏" id="genre_found_footage" className="genre-checkbox" />
              <label htmlFor="genre_found_footage" className="genre-label">„Éï„Ç°„Ç¶„É≥„Éâ„Éï„ÉÉ„ÉÜ„Éº„Ç∏</label>
            </div>
            
            <div className="genre-option" data-value="„É¢„Ç≠„É•„É°„É≥„Çø„É™„Éº">
              <input type="checkbox" name="genre_types" value="„É¢„Ç≠„É•„É°„É≥„Çø„É™„Éº" id="genre_mockumentary" className="genre-checkbox" />
              <label htmlFor="genre_mockumentary" className="genre-label">„É¢„Ç≠„É•„É°„É≥„Çø„É™„Éº</label>
            </div>
            
            <div className="genre-option" data-value="ARG">
              <input type="checkbox" name="genre_types" value="ARG" id="genre_arg_game" className="genre-checkbox" />
              <label htmlFor="genre_arg_game" className="genre-label">ARG</label>
            </div>
            
            <div className="genre-option" data-value="TRPG">
              <input type="checkbox" name="genre_types" value="TRPG" id="genre_trpg_game" className="genre-checkbox" />
              <label htmlFor="genre_trpg_game" className="genre-label">TRPG</label>
            </div>
            
            <div className="genre-option" data-value="„Éê„ÉÉ„ÇØ„É´„Éº„É†">
              <input type="checkbox" name="genre_types" value="„Éê„ÉÉ„ÇØ„É´„Éº„É†" id="genre_backrooms" className="genre-checkbox" />
              <label htmlFor="genre_backrooms" className="genre-label">„Éê„ÉÉ„ÇØ„É´„Éº„É†</label>
            </div>
            
            <div className="genre-option" data-value="„É™„Éü„Éä„É´„Çπ„Éö„Éº„Çπ">
              <input type="checkbox" name="genre_types" value="„É™„Éü„Éä„É´„Çπ„Éö„Éº„Çπ" id="genre_liminal_space" className="genre-checkbox" />
              <label htmlFor="genre_liminal_space" className="genre-label">„É™„Éü„Éä„É´„Çπ„Éö„Éº„Çπ</label>
            </div>
            
            <div className="genre-option" data-value="„ÇØ„É™„Éº„Éî„Éº„Éë„Çπ„Çø">
              <input type="checkbox" name="genre_types" value="„ÇØ„É™„Éº„Éî„Éº„Éë„Çπ„Çø" id="genre_creepypasta" className="genre-checkbox" />
              <label htmlFor="genre_creepypasta" className="genre-label">„ÇØ„É™„Éº„Éî„Éº„Éë„Çπ„Çø</label>
            </div>
            
            <div className="genre-option" data-value="ÂÑÄÂºè/Âë™Ë°ì">
              <input type="checkbox" name="genre_types" value="ÂÑÄÂºè/Âë™Ë°ì" id="genre_ritual" className="genre-checkbox" />
              <label htmlFor="genre_ritual" className="genre-label">ÂÑÄÂºè/Âë™Ë°ì</label>
            </div>
            
            <div className="genre-option" data-value="‰∫ãÊïÖÁâ©‰ª∂">
              <input type="checkbox" name="genre_types" value="‰∫ãÊïÖÁâ©‰ª∂" id="genre_stigmatized_property" className="genre-checkbox" />
              <label htmlFor="genre_stigmatized_property" className="genre-label">‰∫ãÊïÖÁâ©‰ª∂</label>
            </div>
            
            <div className="genre-option" data-value="ÁâπÊÆäÊ∏ÖÊéÉ">
              <input type="checkbox" name="genre_types" value="ÁâπÊÆäÊ∏ÖÊéÉ" id="genre_crime_scene_cleanup" className="genre-checkbox" />
              <label htmlFor="genre_crime_scene_cleanup" className="genre-label">ÁâπÊÆäÊ∏ÖÊéÉ</label>
            </div>
            
            <div className="genre-option" data-value="„Çæ„É≥„Éì">
              <input type="checkbox" name="genre_types" value="„Çæ„É≥„Éì" id="genre_zombie" className="genre-checkbox" />
              <label htmlFor="genre_zombie" className="genre-label">„Çæ„É≥„Éì</label>
            </div>
            
            <div className="genre-option" data-value="„ÅäÂåñ„ÅëÂ±ãÊï∑">
              <input type="checkbox" name="genre_types" value="„ÅäÂåñ„ÅëÂ±ãÊï∑" id="genre_haunted_house" className="genre-checkbox" />
              <label htmlFor="genre_haunted_house" className="genre-label">„ÅäÂåñ„ÅëÂ±ãÊï∑</label>
            </div>
            
            <div className="genre-option" data-value="ÂøÉÈúäÂÜôÁúü">
              <input type="checkbox" name="genre_types" value="ÂøÉÈúäÂÜôÁúü" id="genre_spirit_photo" className="genre-checkbox" />
              <label htmlFor="genre_spirit_photo" className="genre-label">ÂøÉÈúäÂÜôÁúü</label>
            </div>
            
            <div className="genre-option" data-value="ÂøÉÈúäÊò†ÂÉè">
              <input type="checkbox" name="genre_types" value="ÂøÉÈúäÊò†ÂÉè" id="genre_spirit_video" className="genre-checkbox" />
              <label htmlFor="genre_spirit_video" className="genre-label">ÂøÉÈúäÊò†ÂÉè</label>
            </div>
            
            <div className="genre-option" data-value="ÂøÉÈúä„Çπ„Éù„ÉÉ„Éà">
              <input type="checkbox" name="genre_types" value="ÂøÉÈúä„Çπ„Éù„ÉÉ„Éà" id="genre_haunted_spot" className="genre-checkbox" />
              <label htmlFor="genre_haunted_spot" className="genre-label">ÂøÉÈúä„Çπ„Éù„ÉÉ„Éà</label>
            </div>
            
            <div className="genre-option" data-value="Êú™Êù•‰∫∫/‰∫àË®Ä">
              <input type="checkbox" name="genre_types" value="Êú™Êù•‰∫∫/‰∫àË®Ä" id="genre_future_prophecy" className="genre-checkbox" />
              <label htmlFor="genre_future_prophecy" className="genre-label">Êú™Êù•‰∫∫/‰∫àË®Ä</label>
            </div>
            
            <div className="genre-option" data-value="Êú™Ëß£Ê±∫‰∫ã‰ª∂">
              <input type="checkbox" name="genre_types" value="Êú™Ëß£Ê±∫‰∫ã‰ª∂" id="genre_unsolved_case" className="genre-checkbox" />
              <label htmlFor="genre_unsolved_case" className="genre-label">Êú™Ëß£Ê±∫‰∫ã‰ª∂</label>
            </div>
            
            <div className="genre-option" data-value="Ë°åÊñπ‰∏çÊòé">
              <input type="checkbox" name="genre_types" value="Ë°åÊñπ‰∏çÊòé" id="genre_missing_person" className="genre-checkbox" />
              <label htmlFor="genre_missing_person" className="genre-label">Ë°åÊñπ‰∏çÊòé</label>
            </div>
            
            <div className="genre-option" data-value="ÊÆ∫‰∫∫‰∫ã‰ª∂">
              <input type="checkbox" name="genre_types" value="ÊÆ∫‰∫∫‰∫ã‰ª∂" id="genre_murder_case" className="genre-checkbox" />
              <label htmlFor="genre_murder_case" className="genre-label">ÊÆ∫‰∫∫‰∫ã‰ª∂</label>
            </div>
            
            <div className="genre-option" data-value="ÂπΩ‰ΩìÈõ¢ËÑ±">
              <input type="checkbox" name="genre_types" value="ÂπΩ‰ΩìÈõ¢ËÑ±" id="genre_astral_projection" className="genre-checkbox" />
              <label htmlFor="genre_astral_projection" className="genre-label">ÂπΩ‰ΩìÈõ¢ËÑ±</label>
            </div>
            
            <div className="genre-option" data-value="ÊòéÊô∞Â§¢">
              <input type="checkbox" name="genre_types" value="ÊòéÊô∞Â§¢" id="genre_lucid_dream" className="genre-checkbox" />
              <label htmlFor="genre_lucid_dream" className="genre-label">ÊòéÊô∞Â§¢</label>
            </div>
            
            <div className="genre-option" data-value="ÂØÜÂÆ§">
              <input type="checkbox" name="genre_types" value="ÂØÜÂÆ§" id="genre_locked_room" className="genre-checkbox" />
              <label htmlFor="genre_locked_room" className="genre-label">ÂØÜÂÆ§</label>
            </div>
            
            <div className="genre-option" data-value="‰∫∫ÂΩ¢/‰∫∫ÂΩ¢ËÄÖ">
              <input type="checkbox" name="genre_types" value="‰∫∫ÂΩ¢/‰∫∫ÂΩ¢ËÄÖ" id="genre_doll" className="genre-checkbox" />
              <label htmlFor="genre_doll" className="genre-label">‰∫∫ÂΩ¢/‰∫∫ÂΩ¢ËÄÖ</label>
            </div>
          </div>
          
          <h2 className="ng-title">NG„Å™„Éõ„É©„Éº„Ç∏„É£„É≥„É´(Ë§áÊï∞ÂõûÁ≠î)</h2>
          
          <div className="ng-grid">
            <div className="ng-option" data-value="Êã∑Âïè">
              <input type="checkbox" name="ng_types" value="Êã∑Âïè" id="ng_torture" className="ng-checkbox" />
              <label htmlFor="ng_torture" className="ng-label">Êã∑Âïè</label>
            </div>
            
            <div className="ng-option" data-value="ËôêÂæÖ">
              <input type="checkbox" name="ng_types" value="ËôêÂæÖ" id="ng_abuse" className="ng-checkbox" />
              <label htmlFor="ng_abuse" className="ng-label">ËôêÂæÖ</label>
            </div>
            
            <div className="ng-option" data-value="„Ç®„É≠">
              <input type="checkbox" name="ng_types" value="„Ç®„É≠" id="ng_ero" className="ng-checkbox" />
              <label htmlFor="ng_ero" className="ng-label">„Ç®„É≠</label>
            </div>
            
            <div className="ng-option" data-value="Â≠ê‰æõ„ÅÆÊ≠ª">
              <input type="checkbox" name="ng_types" value="Â≠ê‰æõ„ÅÆÊ≠ª" id="ng_child_death" className="ng-checkbox" />
              <label htmlFor="ng_child_death" className="ng-label">Â≠ê‰æõ„ÅÆÊ≠ª</label>
            </div>
            
            <div className="ng-option" data-value="ÂãïÁâ©„ÅÆÊ≠ª">
              <input type="checkbox" name="ng_types" value="ÂãïÁâ©„ÅÆÊ≠ª" id="ng_animal_death" className="ng-checkbox" />
              <label htmlFor="ng_animal_death" className="ng-label">ÂãïÁâ©„ÅÆÊ≠ª</label>
            </div>
            
            <div className="ng-option" data-value="ÊÄ™Ë´á">
              <input type="checkbox" name="ng_types" value="ÊÄ™Ë´á" id="ng_kaidan" className="ng-checkbox" />
              <label htmlFor="ng_kaidan" className="ng-label">ÊÄ™Ë´á</label>
            </div>
            
            <div className="ng-option" data-value="ÊÄ™Ë´áÂ∏´">
              <input type="checkbox" name="ng_types" value="ÊÄ™Ë´áÂ∏´" id="ng_kaidanshi" className="ng-checkbox" />
              <label htmlFor="ng_kaidanshi" className="ng-label">ÊÄ™Ë´áÂ∏´</label>
            </div>
            
            <div className="ng-option" data-value="ÊÄ™Ë´áÊúóË™≠">
              <input type="checkbox" name="ng_types" value="ÊÄ™Ë´áÊúóË™≠" id="ng_kaidan_reading" className="ng-checkbox" />
              <label htmlFor="ng_kaidan_reading" className="ng-label">ÊÄ™Ë´áÊúóË™≠</label>
            </div>
            
            <div className="ng-option" data-value="„ÇÜ„Å£„Åè„ÇäÊÄ™Ë´áÊúóË™≠">
              <input type="checkbox" name="ng_types" value="„ÇÜ„Å£„Åè„ÇäÊÄ™Ë´áÊúóË™≠" id="ng_yukkuri_kaidan" className="ng-checkbox" />
              <label htmlFor="ng_yukkuri_kaidan" className="ng-label">„ÇÜ„Å£„Åè„ÇäÊÄ™Ë´áÊúóË™≠</label>
            </div>
            
            <div className="ng-option" data-value="ÈÉΩÂ∏Ç‰ºùË™¨">
              <input type="checkbox" name="ng_types" value="ÈÉΩÂ∏Ç‰ºùË™¨" id="ng_urban_legend" className="ng-checkbox" />
              <label htmlFor="ng_urban_legend" className="ng-label">ÈÉΩÂ∏Ç‰ºùË™¨</label>
            </div>
            
            <div className="ng-option" data-value="Ê∞ëË©±/‰ºùÊâø">
              <input type="checkbox" name="ng_types" value="Ê∞ëË©±/‰ºùÊâø" id="ng_folklore" className="ng-checkbox" />
              <label htmlFor="ng_folklore" className="ng-label">Ê∞ëË©±/‰ºùÊâø</label>
            </div>
            
            <div className="ng-option" data-value="Âë™Áâ©">
              <input type="checkbox" name="ng_types" value="Âë™Áâ©" id="ng_cursed_object" className="ng-checkbox" />
              <label htmlFor="ng_cursed_object" className="ng-label">Âë™Áâ©</label>
            </div>
            
            <div className="ng-option" data-value="ÂπΩÈúä">
              <input type="checkbox" name="ng_types" value="ÂπΩÈúä" id="ng_ghost" className="ng-checkbox" />
              <label htmlFor="ng_ghost" className="ng-label">ÂπΩÈúä</label>
            </div>
            
            <div className="ng-option" data-value="ÊÇ™È≠î">
              <input type="checkbox" name="ng_types" value="ÊÇ™È≠î" id="ng_demon" className="ng-checkbox" />
              <label htmlFor="ng_demon" className="ng-label">ÊÇ™È≠î</label>
            </div>
            
            <div className="ng-option" data-value="Â¶ñÊÄ™">
              <input type="checkbox" name="ng_types" value="Â¶ñÊÄ™" id="ng_yokai" className="ng-checkbox" />
              <label htmlFor="ng_yokai" className="ng-label">Â¶ñÊÄ™</label>
            </div>
            
            <div className="ng-option" data-value="UMA">
              <input type="checkbox" name="ng_types" value="UMA" id="ng_uma" className="ng-checkbox" />
              <label htmlFor="ng_uma" className="ng-label">UMA</label>
            </div>
            
            <div className="ng-option" data-value="ÂÆáÂÆô‰∫∫/„É¨„Éó„ÉÜ„Ç£„É™„Ç¢„É≥">
              <input type="checkbox" name="ng_types" value="ÂÆáÂÆô‰∫∫/„É¨„Éó„ÉÜ„Ç£„É™„Ç¢„É≥" id="ng_alien" className="ng-checkbox" />
              <label htmlFor="ng_alien" className="ng-label">ÂÆáÂÆô‰∫∫/„É¨„Éó„ÉÜ„Ç£„É™„Ç¢„É≥</label>
            </div>
            
            <div className="ng-option" data-value="„É¢„É≥„Çπ„Çø„Éº/„ÇØ„É™„Éº„ÉÅ„É£„Éº">
              <input type="checkbox" name="ng_types" value="„É¢„É≥„Çπ„Çø„Éº/„ÇØ„É™„Éº„ÉÅ„É£„Éº" id="ng_monster" className="ng-checkbox" />
              <label htmlFor="ng_monster" className="ng-label">„É¢„É≥„Çπ„Çø„Éº/„ÇØ„É™„Éº„ÉÅ„É£„Éº</label>
            </div>
            
            <div className="ng-option" data-value="È≠îÂ•≥">
              <input type="checkbox" name="ng_types" value="È≠îÂ•≥" id="ng_witch" className="ng-checkbox" />
              <label htmlFor="ng_witch" className="ng-label">È≠îÂ•≥</label>
            </div>
            
            <div className="ng-option" data-value="„Éî„Ç®„É≠">
              <input type="checkbox" name="ng_types" value="„Éî„Ç®„É≠" id="ng_clown" className="ng-checkbox" />
              <label htmlFor="ng_clown" className="ng-label">„Éî„Ç®„É≠</label>
            </div>
            
            <div className="ng-option" data-value="„Ç´„É´„Éà">
              <input type="checkbox" name="ng_types" value="„Ç´„É´„Éà" id="ng_cult" className="ng-checkbox" />
              <label htmlFor="ng_cult" className="ng-label">„Ç´„É´„Éà</label>
            </div>
            
            <div className="ng-option" data-value="Áï∞‰∏ñÁïå">
              <input type="checkbox" name="ng_types" value="Áï∞‰∏ñÁïå" id="ng_otherworld" className="ng-checkbox" />
              <label htmlFor="ng_otherworld" className="ng-label">Áï∞‰∏ñÁïå</label>
            </div>
            
            <div className="ng-option" data-value="‰∏çÊÄùË≠∞">
              <input type="checkbox" name="ng_types" value="‰∏çÊÄùË≠∞" id="ng_mystery" className="ng-checkbox" />
              <label htmlFor="ng_mystery" className="ng-label">‰∏çÊÄùË≠∞</label>
            </div>
            
            <div className="ng-option" data-value="‰∫∫ÊÄñ">
              <input type="checkbox" name="ng_types" value="‰∫∫ÊÄñ" id="ng_human_horror" className="ng-checkbox" />
              <label htmlFor="ng_human_horror" className="ng-label">‰∫∫ÊÄñ</label>
            </div>
            
            <div className="ng-option" data-value="Ê¥íËêΩÊÄñ">
              <input type="checkbox" name="ng_types" value="Ê¥íËêΩÊÄñ" id="ng_share_kowai" className="ng-checkbox" />
              <label htmlFor="ng_share_kowai" className="ng-label">Ê¥íËêΩÊÄñ</label>
            </div>
            
            <div className="ng-option" data-value="ÊÑèÂë≥ÊÄñ">
              <input type="checkbox" name="ng_types" value="ÊÑèÂë≥ÊÄñ" id="ng_imi_kowai" className="ng-checkbox" />
              <label htmlFor="ng_imi_kowai" className="ng-label">ÊÑèÂë≥ÊÄñ</label>
            </div>
            
            <div className="ng-option" data-value="SCP">
              <input type="checkbox" name="ng_types" value="SCP" id="ng_scp" className="ng-checkbox" />
              <label htmlFor="ng_scp" className="ng-label">SCP</label>
            </div>
            
            <div className="ng-option" data-value="„Ç∏„É£„É≥„Éó„Çπ„Ç±„Ç¢">
              <input type="checkbox" name="ng_types" value="„Ç∏„É£„É≥„Éó„Çπ„Ç±„Ç¢" id="ng_jump_scare" className="ng-checkbox" />
              <label htmlFor="ng_jump_scare" className="ng-label">„Ç∏„É£„É≥„Éó„Çπ„Ç±„Ç¢</label>
            </div>
            
            <div className="ng-option" data-value="„Éë„Éã„ÉÉ„ÇØ„Çπ„É™„É©„Éº">
              <input type="checkbox" name="ng_types" value="„Éë„Éã„ÉÉ„ÇØ„Çπ„É™„É©„Éº" id="ng_panic_thriller" className="ng-checkbox" />
              <label htmlFor="ng_panic_thriller" className="ng-label">„Éë„Éã„ÉÉ„ÇØ„Çπ„É™„É©„Éº</label>
            </div>
            
            <div className="ng-option" data-value="„Ç¢„Éä„É≠„Ç∞„Éõ„É©„Éº">
              <input type="checkbox" name="ng_types" value="„Ç¢„Éä„É≠„Ç∞„Éõ„É©„Éº" id="ng_analog_horror" className="ng-checkbox" />
              <label htmlFor="ng_analog_horror" className="ng-label">„Ç¢„Éä„É≠„Ç∞„Éõ„É©„Éº</label>
            </div>
            
            <div className="ng-option" data-value="„Çµ„Ç§„Ç≥„Éõ„É©„Éº">
              <input type="checkbox" name="ng_types" value="„Çµ„Ç§„Ç≥„Éõ„É©„Éº" id="ng_psycho_horror" className="ng-checkbox" />
              <label htmlFor="ng_psycho_horror" className="ng-label">„Çµ„Ç§„Ç≥„Éõ„É©„Éº</label>
            </div>
            
            <div className="ng-option" data-value="„Çµ„Çπ„Éö„É≥„Çπ„Éõ„É©„Éº">
              <input type="checkbox" name="ng_types" value="„Çµ„Çπ„Éö„É≥„Çπ„Éõ„É©„Éº" id="ng_suspense_horror" className="ng-checkbox" />
              <label htmlFor="ng_suspense_horror" className="ng-label">„Çµ„Çπ„Éö„É≥„Çπ„Éõ„É©„Éº</label>
            </div>
            
            <div className="ng-option" data-value="„Ç≥„Ç∫„Éü„ÉÉ„ÇØ„Éõ„É©„Éº">
              <input type="checkbox" name="ng_types" value="„Ç≥„Ç∫„Éü„ÉÉ„ÇØ„Éõ„É©„Éº" id="ng_cosmic_horror" className="ng-checkbox" />
              <label htmlFor="ng_cosmic_horror" className="ng-label">„Ç≥„Ç∫„Éü„ÉÉ„ÇØ„Éõ„É©„Éº</label>
            </div>
            
            <div className="ng-option" data-value="„Ç¥„Ç∑„ÉÉ„ÇØ„Éõ„É©„Éº">
              <input type="checkbox" name="ng_types" value="„Ç¥„Ç∑„ÉÉ„ÇØ„Éõ„É©„Éº" id="ng_gothic_horror" className="ng-checkbox" />
              <label htmlFor="ng_gothic_horror" className="ng-label">„Ç¥„Ç∑„ÉÉ„ÇØ„Éõ„É©„Éº</label>
            </div>
            
            <div className="ng-option" data-value="„Éï„Ç©„Éº„ÇØ„Éõ„É©„Éº">
              <input type="checkbox" name="ng_types" value="„Éï„Ç©„Éº„ÇØ„Éõ„É©„Éº" id="ng_folk_horror" className="ng-checkbox" />
              <label htmlFor="ng_folk_horror" className="ng-label">„Éï„Ç©„Éº„ÇØ„Éõ„É©„Éº</label>
            </div>
            
            <div className="ng-option" data-value="SF„Éõ„É©„Éº">
              <input type="checkbox" name="ng_types" value="SF„Éõ„É©„Éº" id="ng_sf_horror" className="ng-checkbox" />
              <label htmlFor="ng_sf_horror" className="ng-label">SF„Éõ„É©„Éº</label>
            </div>
            
            <div className="ng-option" data-value="„Éõ„É©„Éº„Ç≥„É°„Éá„Ç£">
              <input type="checkbox" name="ng_types" value="„Éõ„É©„Éº„Ç≥„É°„Éá„Ç£" id="ng_horror_comedy" className="ng-checkbox" />
              <label htmlFor="ng_horror_comedy" className="ng-label">„Éõ„É©„Éº„Ç≥„É°„Éá„Ç£</label>
            </div>
            
            <div className="ng-option" data-value="„É¢„Ç≠„É•„É°„É≥„Çø„É™„Éº">
              <input type="checkbox" name="ng_types" value="„É¢„Ç≠„É•„É°„É≥„Çø„É™„Éº" id="ng_mockumentary" className="ng-checkbox" />
              <label htmlFor="ng_mockumentary" className="ng-label">„É¢„Ç≠„É•„É°„É≥„Çø„É™„Éº</label>
            </div>
            
            <div className="ng-option" data-value="„Çπ„É©„ÉÉ„Ç∑„É£„Éº/„Çπ„Éó„É©„ÉÉ„Çø/Gore">
              <input type="checkbox" name="ng_types" value="„Çπ„É©„ÉÉ„Ç∑„É£„Éº/„Çπ„Éó„É©„ÉÉ„Çø/Gore" id="ng_slasher" className="ng-checkbox" />
              <label htmlFor="ng_slasher" className="ng-label">„Çπ„É©„ÉÉ„Ç∑„É£„Éº/„Çπ„Éó„É©„ÉÉ„Çø/Gore</label>
            </div>
            
            <div className="ng-option" data-value="„Éï„Ç°„Ç¶„É≥„Éâ„Éï„ÉÉ„ÉÜ„Éº„Ç∏">
              <input type="checkbox" name="ng_types" value="„Éï„Ç°„Ç¶„É≥„Éâ„Éï„ÉÉ„ÉÜ„Éº„Ç∏" id="ng_found_footage" className="ng-checkbox" />
              <label htmlFor="ng_found_footage" className="ng-label">„Éï„Ç°„Ç¶„É≥„Éâ„Éï„ÉÉ„ÉÜ„Éº„Ç∏</label>
            </div>
            
            <div className="ng-option" data-value="ARG">
              <input type="checkbox" name="ng_types" value="ARG" id="ng_arg_game" className="ng-checkbox" />
              <label htmlFor="ng_arg_game" className="ng-label">ARG</label>
            </div>
            
            <div className="ng-option" data-value="TRPG">
              <input type="checkbox" name="ng_types" value="TRPG" id="ng_trpg_game" className="ng-checkbox" />
              <label htmlFor="ng_trpg_game" className="ng-label">TRPG</label>
            </div>
            
            <div className="ng-option" data-value="„Éê„ÉÉ„ÇØ„É´„Éº„É†">
              <input type="checkbox" name="ng_types" value="„Éê„ÉÉ„ÇØ„É´„Éº„É†" id="ng_backrooms" className="ng-checkbox" />
              <label htmlFor="ng_backrooms" className="ng-label">„Éê„ÉÉ„ÇØ„É´„Éº„É†</label>
            </div>
            
            <div className="ng-option" data-value="„É™„Éü„Éä„É´„Çπ„Éö„Éº„Çπ">
              <input type="checkbox" name="ng_types" value="„É™„Éü„Éä„É´„Çπ„Éö„Éº„Çπ" id="ng_liminal_space" className="ng-checkbox" />
              <label htmlFor="ng_liminal_space" className="ng-label">„É™„Éü„Éä„É´„Çπ„Éö„Éº„Çπ</label>
            </div>
            
            <div className="ng-option" data-value="„ÇØ„É™„Éº„Éî„Éº„Éë„Çπ„Çø">
              <input type="checkbox" name="ng_types" value="„ÇØ„É™„Éº„Éî„Éº„Éë„Çπ„Çø" id="ng_creepypasta" className="ng-checkbox" />
              <label htmlFor="ng_creepypasta" className="ng-label">„ÇØ„É™„Éº„Éî„Éº„Éë„Çπ„Çø</label>
            </div>
            
            <div className="ng-option" data-value="ÂÑÄÂºè/Âë™Ë°ì">
              <input type="checkbox" name="ng_types" value="ÂÑÄÂºè/Âë™Ë°ì" id="ng_ritual" className="ng-checkbox" />
              <label htmlFor="ng_ritual" className="ng-label">ÂÑÄÂºè/Âë™Ë°ì</label>
            </div>
            
            <div className="ng-option" data-value="‰∫ãÊïÖÁâ©‰ª∂">
              <input type="checkbox" name="ng_types" value="‰∫ãÊïÖÁâ©‰ª∂" id="ng_stigmatized_property" className="ng-checkbox" />
              <label htmlFor="ng_stigmatized_property" className="ng-label">‰∫ãÊïÖÁâ©‰ª∂</label>
            </div>
            
            <div className="ng-option" data-value="ÁâπÊÆäÊ∏ÖÊéÉ">
              <input type="checkbox" name="ng_types" value="ÁâπÊÆäÊ∏ÖÊéÉ" id="ng_crime_scene_cleanup" className="ng-checkbox" />
              <label htmlFor="ng_crime_scene_cleanup" className="ng-label">ÁâπÊÆäÊ∏ÖÊéÉ</label>
            </div>
            
            <div className="ng-option" data-value="„Çæ„É≥„Éì">
              <input type="checkbox" name="ng_types" value="„Çæ„É≥„Éì" id="ng_zombie" className="ng-checkbox" />
              <label htmlFor="ng_zombie" className="ng-label">„Çæ„É≥„Éì</label>
            </div>
            
            <div className="ng-option" data-value="„ÅäÂåñ„ÅëÂ±ãÊï∑">
              <input type="checkbox" name="ng_types" value="„ÅäÂåñ„ÅëÂ±ãÊï∑" id="ng_haunted_house" className="ng-checkbox" />
              <label htmlFor="ng_haunted_house" className="ng-label">„ÅäÂåñ„ÅëÂ±ãÊï∑</label>
            </div>
            
            <div className="ng-option" data-value="ÂøÉÈúäÂÜôÁúü">
              <input type="checkbox" name="ng_types" value="ÂøÉÈúäÂÜôÁúü" id="ng_spirit_photo" className="ng-checkbox" />
              <label htmlFor="ng_spirit_photo" className="ng-label">ÂøÉÈúäÂÜôÁúü</label>
            </div>
            
            <div className="ng-option" data-value="ÂøÉÈúäÊò†ÂÉè">
              <input type="checkbox" name="ng_types" value="ÂøÉÈúäÊò†ÂÉè" id="ng_spirit_video" className="ng-checkbox" />
              <label htmlFor="ng_spirit_video" className="ng-label">ÂøÉÈúäÊò†ÂÉè</label>
            </div>
            
            <div className="ng-option" data-value="ÂøÉÈúä„Çπ„Éù„ÉÉ„Éà">
              <input type="checkbox" name="ng_types" value="ÂøÉÈúä„Çπ„Éù„ÉÉ„Éà" id="ng_haunted_spot" className="ng-checkbox" />
              <label htmlFor="ng_haunted_spot" className="ng-label">ÂøÉÈúä„Çπ„Éù„ÉÉ„Éà</label>
            </div>
            
            <div className="ng-option" data-value="Êú™Êù•‰∫∫/‰∫àË®Ä">
              <input type="checkbox" name="ng_types" value="Êú™Êù•‰∫∫/‰∫àË®Ä" id="ng_future_prophecy" className="ng-checkbox" />
              <label htmlFor="ng_future_prophecy" className="ng-label">Êú™Êù•‰∫∫/‰∫àË®Ä</label>
            </div>
            
            <div className="ng-option" data-value="Êú™Ëß£Ê±∫‰∫ã‰ª∂">
              <input type="checkbox" name="ng_types" value="Êú™Ëß£Ê±∫‰∫ã‰ª∂" id="ng_unsolved_case" className="ng-checkbox" />
              <label htmlFor="ng_unsolved_case" className="ng-label">Êú™Ëß£Ê±∫‰∫ã‰ª∂</label>
            </div>
            
            <div className="ng-option" data-value="Ë°åÊñπ‰∏çÊòé">
              <input type="checkbox" name="ng_types" value="Ë°åÊñπ‰∏çÊòé" id="ng_missing_person" className="ng-checkbox" />
              <label htmlFor="ng_missing_person" className="ng-label">Ë°åÊñπ‰∏çÊòé</label>
            </div>
            
            <div className="ng-option" data-value="ÊÆ∫‰∫∫‰∫ã‰ª∂">
              <input type="checkbox" name="ng_types" value="ÊÆ∫‰∫∫‰∫ã‰ª∂" id="ng_murder_case" className="ng-checkbox" />
              <label htmlFor="ng_murder_case" className="ng-label">ÊÆ∫‰∫∫‰∫ã‰ª∂</label>
            </div>
            
            <div className="ng-option" data-value="ÂπΩ‰ΩìÈõ¢ËÑ±">
              <input type="checkbox" name="ng_types" value="ÂπΩ‰ΩìÈõ¢ËÑ±" id="ng_astral_projection" className="ng-checkbox" />
              <label htmlFor="ng_astral_projection" className="ng-label">ÂπΩ‰ΩìÈõ¢ËÑ±</label>
            </div>
            
            <div className="ng-option" data-value="ÊòéÊô∞Â§¢">
              <input type="checkbox" name="ng_types" value="ÊòéÊô∞Â§¢" id="ng_lucid_dream" className="ng-checkbox" />
              <label htmlFor="ng_lucid_dream" className="ng-label">ÊòéÊô∞Â§¢</label>
            </div>
            
            <div className="ng-option" data-value="ÂØÜÂÆ§">
              <input type="checkbox" name="ng_types" value="ÂØÜÂÆ§" id="ng_locked_room" className="ng-checkbox" />
              <label htmlFor="ng_locked_room" className="ng-label">ÂØÜÂÆ§</label>
            </div>
            
            <div className="ng-option" data-value="‰∫∫ÂΩ¢/‰∫∫ÂΩ¢ËÄÖ">
              <input type="checkbox" name="ng_types" value="‰∫∫ÂΩ¢/‰∫∫ÂΩ¢ËÄÖ" id="ng_doll" className="ng-checkbox" />
              <label htmlFor="ng_doll" className="ng-label">‰∫∫ÂΩ¢/‰∫∫ÂΩ¢ËÄÖ</label>
            </div>
          </div>
          
          <h2 className="belief-title">ÂπΩÈúä„ÉªÊÄ™Â•áÁèæË±°„Çí‰ø°„Åò„ÇãÔºü</h2>
          
          <div className="belief-grid">
            <div className="belief-option">
              <input type="radio" name="ghost_belief" value="‰ø°„Åò„Çã" id="ghost_believe" className="belief-radio" />
              <label htmlFor="ghost_believe" className="belief-label">‰ø°„Åò„Çã</label>
            </div>
            
            <div className="belief-option">
              <input type="radio" name="ghost_belief" value="‰ø°„Åò„Å™„ÅÑ" id="ghost_not_believe" className="belief-radio" />
              <label htmlFor="ghost_not_believe" className="belief-label">‰ø°„Åò„Å™„ÅÑ</label>
            </div>
            
            <div className="belief-option">
              <input type="radio" name="ghost_belief" value="ÂàÜ„Åã„Çâ„Å™„ÅÑ" id="ghost_unknown" className="belief-radio" />
              <label htmlFor="ghost_unknown" className="belief-label">ÂàÜ„Åã„Çâ„Å™„ÅÑ</label>
            </div>
          </div>
          
          <h2 className="story-title">ÊÄ™Ë´á„ÅØÂÆüË©±„Å†„Å®ÊÄù„ÅÜÔºü</h2>
          
          <div className="story-grid">
            <div className="story-option">
              <input type="radio" name="story_belief" value="‰∏ÄÈÉ®„ÅØÂÆüË©±" id="story_partial" className="story-radio" />
              <label htmlFor="story_partial" className="story-label">‰∏ÄÈÉ®„ÅØÂÆüË©±</label>
            </div>
            
            <div className="story-option">
              <input type="radio" name="story_belief" value="„Éï„Ç£„ÇØ„Ç∑„Éß„É≥" id="story_fiction" className="story-radio" />
              <label htmlFor="story_fiction" className="story-label">„Éï„Ç£„ÇØ„Ç∑„Éß„É≥</label>
            </div>
            
            <div className="story-option">
              <input type="radio" name="story_belief" value="ÂàÜ„Åã„Çâ„Å™„ÅÑ" id="story_unknown" className="story-radio" />
              <label htmlFor="story_unknown" className="story-label">ÂàÜ„Åã„Çâ„Å™„ÅÑ</label>
            </div>
          </div>
          
          <h2 className="paranormal-title">„ÅäÂåñ„Åë„ÇíË¶ã„ÇãÁÇ∫„Å™„Çâ„Å°„Çá„Å£„Å®‰∏çË¨πÊÖé„Å™„Åì„Å®„Çí„Åó„Å¶„Åø„Åü„ÅÑÔºü(‰æã:ÂøÉÈúä„Çπ„Éù„ÉÉ„Éà„ÅßËÇùË©¶„Åó„ÄÅËá™Â∑±Ë≤¨‰ªªÁ≥ª„ÅÆÂë™Ë°ìÁ≠â)</h2>
          
          <div className="paranormal-grid">
            <div className="paranormal-option">
              <input type="radio" name="paranormal_activity" value="„ÅØ„ÅÑ" id="paranormal_yes" className="paranormal-radio" />
              <label htmlFor="paranormal_yes" className="paranormal-label">„ÅØ„ÅÑ</label>
            </div>
            
            <div className="paranormal-option">
              <input type="radio" name="paranormal_activity" value="„ÅÑ„ÅÑ„Åà" id="paranormal_no" className="paranormal-radio" />
              <label htmlFor="paranormal_no" className="paranormal-label">„ÅÑ„ÅÑ„Åà</label>
            </div>
            
            <div className="paranormal-option">
              <input type="radio" name="paranormal_activity" value="„Å©„Å°„Çâ„Å®„ÇÇË®Ä„Åà„Å™„ÅÑ/ÁÑ°ÂõûÁ≠î" id="paranormal_neutral" className="paranormal-radio" />
              <label htmlFor="paranormal_neutral" className="paranormal-label">„Å©„Å°„Çâ„Å®„ÇÇË®Ä„Åà„Å™„ÅÑ/ÁÑ°ÂõûÁ≠î</label>
            </div>
          </div>
          
          <div className="consent-section">
            <div className="consent-checkbox-group">
              <input 
                type="checkbox" 
                id="data-consent" 
                name="data_consent" 
                className="consent-checkbox" 
                required 
              />
              <label htmlFor="data-consent" className="consent-label">
                „ÅÇ„Å™„Åü„ÅåÂÖ•Âäõ„Åó„Åü„Éõ„É©„Éº‰∫∫Âè£Áµ±Ë®àÂ≠¶ÁöÑ„Éá„Éº„Çø„ÅØÂåøÂêçÂåñ„Åï„Çå„ÅüÁä∂ÊÖã„ÅßÊñ∞„Åü„Å™„Éõ„É©„ÉºÈñ¢ÈÄ£‰∫ãÊ•≠ÈñãÁô∫„Å´Âà©Áî®„Åï„Çå„ÇãÂ†¥Âêà„Åå„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÇ
              </label>
            </div>
          </div>
          
          <div className="media-actions">
            <button 
              type="submit" 
              id="start-btn" 
              className="next-btn" 
              disabled
            >
              „ÅØ„Åò„ÇÅ„Çã
            </button>
          </div>
        </form>
        
        <script dangerouslySetInnerHTML={{__html: `
          document.addEventListener('DOMContentLoaded', function() {
            console.log('Horror preferences consent checkbox setup started');
            
            // Ë©≥Á¥∞„Å™„Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÇíÂèéÈõÜ
            console.log('Document ready state:', document.readyState);
            console.log('All elements with id data-consent:', document.querySelectorAll('#data-consent'));
            console.log('All elements with id start-btn:', document.querySelectorAll('#start-btn'));
            
            const consentCheckbox = document.getElementById('data-consent');
            const startBtn = document.getElementById('start-btn');
            
            console.log('Consent checkbox element:', consentCheckbox);
            console.log('Start button element:', startBtn);
            
            if (!consentCheckbox || !startBtn) {
              console.error('Required elements not found for consent checkbox');
              return;
            }
            
            function updateButtonState() {
              console.log('Updating button state, checkbox checked:', consentCheckbox.checked);
              
              if (consentCheckbox.checked) {
                startBtn.disabled = false;
                startBtn.style.opacity = '';
                startBtn.style.cursor = '';
                startBtn.style.backgroundColor = '';
                console.log('Button enabled');
              } else {
                startBtn.disabled = true;
                startBtn.style.opacity = '0.5';
                startBtn.style.cursor = 'not-allowed';
                startBtn.style.backgroundColor = '#6c757d';
                console.log('Button disabled');
              }
            }
            
            consentCheckbox.addEventListener('change', function() {
              console.log('Checkbox changed');
              updateButtonState();
            });
            
            // ÂàùÊúüÁä∂ÊÖã„ÅÆË®≠ÂÆö
            updateButtonState();
            console.log('Horror preferences consent checkbox setup completed');
          });
        `}} />
      </div>
    </div>
  )
})

// Horror preferences form handler
app.post('/horror-preferences', passwordProtection, async (c) => {
  const formData = await c.req.formData()
  const mediaTypes = formData.getAll('media_types') as string[]
  const genreTypes = formData.getAll('genre_types') as string[]
  const ngTypes = formData.getAll('ng_types') as string[]
  const ghostBelief = formData.get('ghost_belief')?.toString() || ''
  const storyBelief = formData.get('story_belief')?.toString() || ''
  const paranormalActivity = formData.get('paranormal_activity')?.toString() || ''
  const dataConsent = formData.get('data_consent')?.toString()
  
  // „Éá„Éº„ÇøÂà©Áî®ÂêåÊÑè„ÉÅ„Çß„ÉÉ„ÇØ
  if (!dataConsent) {
    return c.render(
      <div className="authenticated-body">
        <AppHeader showLogout={true} />
        <div className="horror-preferences-container">
          <h1 className="profile-title">„Éõ„É©„ÉºÂ•Ω„ÅøË®≠ÂÆö</h1>
          <div className="error-message">„Éá„Éº„ÇøÂà©Áî®„Å´Èñ¢„Åô„ÇãÂêåÊÑè„ÅåÂøÖË¶Å„Åß„Åô</div>
          <a href="/horror-preferences" className="btn btn-primary">Êàª„Çã</a>
        </div>
      </div>
    )
  }
  
  // „Éó„É≠„Éï„Ç£„Éº„É´ÊÉÖÂ†±„Å´„Éõ„É©„ÉºÂ•Ω„ÅøË®≠ÂÆö„Çí‰øùÂ≠ò
  const currentUser = getCookie(c, 'current_user')
  if (currentUser && users.has(currentUser)) {
    const user = users.get(currentUser)
    users.set(currentUser, {
      ...user,
      horrorPreferences: {
        mediaTypes: mediaTypes || [],
        genreTypes: genreTypes || [],
        ngTypes: ngTypes || [],
        ghostBelief: ghostBelief,
        storyBelief: storyBelief,
        paranormalActivity: paranormalActivity
      }
    })
  }
  
  // „É°„Ç§„É≥„Éö„Éº„Ç∏„Å´ÁßªÂãï
  return c.redirect('/')
})

// Profile page
app.get('/profile/:userId', passwordProtection, (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const targetUserId = c.req.param('userId')
  const currentUser = users.get(currentUserId)
  const targetUser = users.get(targetUserId)
  
  // Êú¨‰∫∫Ë™çË®ºÁä∂ÊÖã„ÇíÁ¢∫Ë™ç
  const targetVerification = globalData.identityVerifications.get(targetUserId)
  if (targetUser && targetVerification && targetVerification.status === 'approved') {
    targetUser.isVerified = true
  }
  
  if (!targetUser || !targetUser.profile) {
    return c.redirect('/')
  }
  
  // „Éñ„É≠„ÉÉ„ÇØ„ÉÅ„Çß„ÉÉ„ÇØ
  const blockedByTarget = globalData.blockedUsers.get(targetUserId) || new Set()
  const blockedByCurrent = globalData.blockedUsers.get(currentUserId) || new Set()
  
  if (blockedByTarget.has(currentUserId) || blockedByCurrent.has(targetUserId)) {
    return c.redirect('/')
  }
  
  const isOwnProfile = currentUserId === targetUserId
  
  return c.render(
    <div className="authenticated-body">
      <AppHeader showLogout={true} currentUser={currentUser} />
      <div className="profile-container">
        <div className="profile-header">
          <div className="profile-avatar">
            {globalData.profileImages.get(targetUserId) ? (
              <img src={globalData.profileImages.get(targetUserId)} alt="„Éó„É≠„Éï„Ç£„Éº„É´ÁîªÂÉè" className="profile-avatar-img" />
            ) : (
              <div className="profile-avatar-placeholder"></div>
            )}
            {isOwnProfile && (
              <button className="edit-avatar-btn" onclick="window.location.href='/profile/edit'">Á∑®ÈõÜ</button>
            )}
          </div>
          
          <div className="profile-info">
            <h1 className="profile-name">
              {targetUser.displayName || targetUser.profile.displayName}
              {targetUser.isVerified && <span className="verified-badge">Êú¨‰∫∫Ë™çË®ºÊ∏à„Åø</span>}
            </h1>
            
            <div className="profile-details">
              <div className="profile-detail-item">
                <span className="detail-label">ÊÄßÂà•:</span>
                <span className="detail-value">{targetUser.profile.gender || 'Êú™Ë®≠ÂÆö'}</span>
              </div>
              <div className="profile-detail-item">
                <span className="detail-label">ÈÉΩÈÅìÂ∫úÁúå:</span>
                <span className="detail-value">{targetUser.profile.prefecture || 'Êú™Ë®≠ÂÆö'}</span>
              </div>
            </div>
            
            {targetUser.profile.selfIntroduction && (
              <div className="profile-introduction">
                <h3>Ëá™Â∑±Á¥π‰ªã</h3>
                <p>{targetUser.profile.selfIntroduction}</p>
              </div>
            )}
          </div>
          
          <div className="profile-actions">
            {isOwnProfile ? (
              <div className="own-profile-actions">
                <button className="btn btn-primary" onclick="window.location.href='/profile/edit'">„Éó„É≠„Éï„Ç£„Éº„É´Á∑®ÈõÜ</button>
                <button className="btn btn-secondary" onclick="window.location.href='/identity-verification'">Êú¨‰∫∫Ë™çË®º</button>
              </div>
            ) : (
              <div className="other-profile-actions" data-user-id={targetUserId}>
                <button className="btn btn-primary follow-btn" style={{ display: 'none' }}>„Éï„Ç£„Éº„Éâ„Å´ËøΩÂä†</button>
                {targetUser.isVerified && (
                  <button className="btn btn-secondary dm-btn">DMÈÄÅ‰ø°</button>
                )}
                <button className="btn btn-danger block-btn">„Éñ„É≠„ÉÉ„ÇØ</button>
              </div>
            )}
          </div>
        </div>
        
        {/* „Éõ„É©„Éº„ÅÆÂ•Ω„Åø */}
        {targetUser.horrorPreferences && (
          <div className="profile-section">
            <h3>„Éõ„É©„Éº„ÅÆÂ•Ω„Åø</h3>
            <div className="horror-preferences">
              {targetUser.horrorPreferences.mediaTypes?.length > 0 && (
                <div className="preference-group">
                  <span className="preference-label">„É°„Éá„Ç£„Ç¢„Çø„Ç§„Éó:</span>
                  <div className="preference-tags">
                    {targetUser.horrorPreferences.mediaTypes.map((type, index) => (
                      <span key={index} className="preference-tag">{type}</span>
                    ))}
                  </div>
                </div>
              )}
              {targetUser.horrorPreferences.genreTypes?.length > 0 && (
                <div className="preference-group">
                  <span className="preference-label">„Ç∏„É£„É≥„É´:</span>
                  <div className="preference-tags">
                    {targetUser.horrorPreferences.genreTypes.map((type, index) => (
                      <span key={index} className="preference-tag">{type}</span>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        )}
        
        {/* ÊúÄÊñ∞„ÅÆÊäïÁ®ø */}
        <div className="profile-section">
          <h3>ÊúÄÊñ∞„ÅÆÊäïÁ®ø</h3>
          <div id="profile-recent-posts" className="recent-posts-container">
            {/* JavaScript „ÅßÂãïÁöÑ„Å´Ë™≠„ÅøËæº„Åø */}
          </div>
        </div>
        
        {/* Ëá™ÂàÜ„ÅÆ„Éó„É≠„Éï„Ç£„Éº„É´„ÅÆÂ†¥Âêà„ÅÆ„ÅøË°®Á§∫ */}
        {isOwnProfile && (
          <div className="profile-section">
            <h3>„Éñ„É≠„ÉÉ„ÇØÁÆ°ÁêÜ</h3>
            <div id="blocked-users-list" className="blocked-users-container">
              {/* JavaScript „ÅßÂãïÁöÑ„Å´Ë™≠„ÅøËæº„Åø */}
            </div>
          </div>
        )}
      </div>
    </div>
  )
})

// Profile edit page
app.get('/profile/edit', passwordProtection, (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const currentUser = users.get(currentUserId)
  
  return c.render(
    <div className="authenticated-body">
      <AppHeader showLogout={true} currentUser={currentUser} />
      <div className="profile-edit-container">
        <h1>„Éó„É≠„Éï„Ç£„Éº„É´Á∑®ÈõÜ</h1>
        
        <form className="profile-edit-form" method="POST" action="/profile/update" enctype="multipart/form-data">
          <div className="form-section">
            <h3>„Éó„É≠„Éï„Ç£„Éº„É´ÁîªÂÉè</h3>
            <div className="avatar-upload-area">
              <div className="current-avatar">
                {globalData.profileImages.get(currentUserId) ? (
                  <img src={globalData.profileImages.get(currentUserId)} alt="ÁèæÂú®„ÅÆ„Éó„É≠„Éï„Ç£„Éº„É´ÁîªÂÉè" className="current-avatar-img" />
                ) : (
                  <div className="current-avatar-placeholder"></div>
                )}
              </div>
              <input type="file" name="profileImage" accept="image/*" className="avatar-input" />
              <button type="button" className="btn btn-secondary" onclick="document.querySelector('.avatar-input').click()">ÁîªÂÉè„ÇíÈÅ∏Êäû</button>
            </div>
          </div>
          
          <div className="form-section">
            <h3>Âü∫Êú¨ÊÉÖÂ†±</h3>
            <div className="form-group">
              <label className="form-label">Ë°®Á§∫Âêç</label>
              <input type="text" name="displayName" className="form-control" value={currentUser?.displayName || ''} required />
            </div>
          </div>
          
          <div className="form-actions">
            <button type="submit" className="btn btn-primary">‰øùÂ≠ò</button>
            <a href={`/profile/${currentUserId}`} className="btn btn-secondary">„Ç≠„É£„É≥„Çª„É´</a>
          </div>
        </form>
      </div>
    </div>
  )
})

// Identity verification page
app.get('/identity-verification', passwordProtection, (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const currentUser = users.get(currentUserId)
  const verification = globalData.identityVerifications.get(currentUserId)
  
  return c.render(
    <div className="authenticated-body">
      <AppHeader showLogout={true} currentUser={currentUser} />
      <div className="verification-container">
        <h1>Êú¨‰∫∫Ë™çË®º</h1>
        
        {verification ? (
          <div className="verification-status">
            {verification.status === 'pending' && (
              <div className="status-pending">
                <h3>ÂØ©Êüª‰∏≠</h3>
                <p>ÊèêÂá∫„Åï„Çå„ÅüÊõ∏È°û„ÇíÂØ©Êüª‰∏≠„Åß„Åô„ÄÇÂØ©ÊüªÂÆå‰∫Ü„Åæ„Åß‰ªä„Åó„Å∞„Çâ„Åè„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ„ÄÇ</p>
                <div className="submitted-info">
                  <p><strong>ÊèêÂá∫Êó•:</strong> {new Date(verification.submittedAt).toLocaleDateString('ja-JP')}</p>
                  <p><strong>Êõ∏È°û:</strong> {verification.documentType}</p>
                </div>
              </div>
            )}
            
            {verification.status === 'approved' && (
              <div className="status-approved">
                <h3>Ë™çË®ºÊ∏à„Åø</h3>
                <p>Êú¨‰∫∫Ë™çË®º„ÅåÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ</p>
                <div className="verification-badge">
                  <span className="verified-icon">‚úì</span>
                  Ë™çË®ºÊ∏à„Åø„É¶„Éº„Ç∂„Éº
                </div>
              </div>
            )}
            
            {verification.status === 'rejected' && (
              <div className="status-rejected">
                <h3>ÂØ©Êüª‰∏çÂêàÊ†º</h3>
                <p>ÊèêÂá∫„Åï„Çå„ÅüÊõ∏È°û„Åß„ÅØÊú¨‰∫∫Ë™çË®º„ÇíÂÆå‰∫Ü„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ</p>
                {verification.rejectionReason && (
                  <p><strong>ÁêÜÁî±:</strong> {verification.rejectionReason}</p>
                )}
                <p>ÂÜçÂ∫¶„ÄÅÊ≠£„Åó„ÅÑÊú¨‰∫∫Á¢∫Ë™çÊõ∏È°û„ÇíÊèêÂá∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</p>
              </div>
            )}
          </div>
        ) : (
          <div className="verification-form-container">
            <div className="verification-info">
              <h3>Êú¨‰∫∫Ë™çË®º„Å´„Å§„ÅÑ„Å¶</h3>
              <ul>
                <li>Êú¨‰∫∫Ë™çË®º„ÇíË°å„ÅÜ„Åì„Å®„Åß„ÄÅDMÊ©üËÉΩ„Çí‰ΩøÁî®„Åß„Åç„Çã„Çà„ÅÜ„Å´„Å™„Çä„Åæ„Åô</li>
                <li>ÈÅãËª¢ÂÖçË®±Ë®º„ÄÅ„Éë„Çπ„Éù„Éº„Éà„ÄÅ„Éû„Ç§„Éä„É≥„Éê„Éº„Ç´„Éº„Éâ„Å™„Å©„ÅÆÂÖ¨ÁöÑË∫´ÂàÜË®ºÊòéÊõ∏„ÅåÂøÖË¶Å„Åß„Åô</li>
                <li>ÊèêÂá∫„Åï„Çå„ÅüÁîªÂÉè„ÅØË™çË®º„ÅÆ„Åø„Å´‰ΩøÁî®„Åï„Çå„ÄÅÁ¨¨‰∏âËÄÖ„Å´ÂÖ¨Èñã„Åï„Çå„Çã„Åì„Å®„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì</li>
                <li>ÂØ©Êüª„Å´„ÅØ2-3Âñ∂Ê•≠Êó•Á®ãÂ∫¶„Åã„Åã„Çä„Åæ„Åô</li>
              </ul>
            </div>
            
            <form className="verification-form" method="POST" action="/identity-verification/submit" enctype="multipart/form-data">
              <div className="form-group">
                <label className="form-label">Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û„ÅÆÁ®ÆÈ°û</label>
                <select name="documentType" className="form-control" required>
                  <option value="">ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</option>
                  <option value="drivers_license">ÈÅãËª¢ÂÖçË®±Ë®º</option>
                  <option value="passport">„Éë„Çπ„Éù„Éº„Éà</option>
                  <option value="mynumber_card">„Éû„Ç§„Éä„É≥„Éê„Éº„Ç´„Éº„Éâ</option>
                  <option value="residence_card">Âú®Áïô„Ç´„Éº„Éâ</option>
                </select>
              </div>
              
              <div className="form-group">
                <label className="form-label">Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û„ÅÆÁîªÂÉè</label>
                <input type="file" name="documentImage" accept="image/*" className="form-control" required />
                <small className="form-text">JPEG„Åæ„Åü„ÅØPNGÂΩ¢Âºè„ÄÅÊúÄÂ§ß5MB„Åæ„Åß</small>
              </div>
              
              <div className="form-group">
                <label className="checkbox-container">
                  <input type="checkbox" name="agreement" required />
                  <span className="checkmark"></span>
                  ÂÄã‰∫∫ÊÉÖÂ†±„ÅÆÂèñ„ÇäÊâ±„ÅÑ„Å´ÂêåÊÑè„Åó„Åæ„Åô
                </label>
              </div>
              
              <div className="form-actions">
                <button type="submit" className="btn btn-primary">Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û„ÇíÊèêÂá∫</button>
                <a href={`/profile/${currentUserId}`} className="btn btn-secondary">Êàª„Çã</a>
              </div>
            </form>
          </div>
        )}
      </div>
    </div>
  )
})

// Identity verification submission
app.post('/identity-verification/submit', passwordProtection, async (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const formData = await c.req.formData()
  
  const documentType = formData.get('documentType')?.toString()
  const documentImage = formData.get('documentImage') as File
  const agreement = formData.get('agreement')
  
  if (!documentType || !documentImage || !agreement) {
    return c.redirect('/identity-verification?error=required_fields')
  }
  
  if (documentImage.size > 5 * 1024 * 1024) {
    return c.redirect('/identity-verification?error=file_too_large')
  }
  
  try {
    // ÁîªÂÉè„ÇíBase64„Å´Â§âÊèõ„Åó„Å¶‰øùÂ≠ò
    const buffer = await documentImage.arrayBuffer()
    const base64 = btoa(String.fromCharCode(...new Uint8Array(buffer)))
    const imageData = `data:${documentImage.type};base64,${base64}`
    
    // Êú¨‰∫∫Ë™çË®º„Éá„Éº„Çø„Çí‰øùÂ≠ò
    globalData.identityVerifications.set(currentUserId, {
      status: 'pending',
      documentType: documentType,
      documentImage: imageData,
      submittedAt: new Date().toISOString(),
      reviewedAt: null,
      reviewedBy: null,
      rejectionReason: null
    })
    
    return c.redirect('/identity-verification?success=submitted')
  } catch (error) {
    console.error('Identity verification submission error:', error)
    return c.redirect('/identity-verification?error=upload_failed')
  }
})

// Profile update handler
app.post('/profile/update', passwordProtection, async (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const formData = await c.req.formData()
  
  const displayName = formData.get('displayName')?.toString().trim()
  const profileImage = formData.get('profileImage') as File
  
  if (!displayName) {
    return c.redirect('/profile/edit?error=required')
  }
  
  const currentUser = users.get(currentUserId)
  if (!currentUser) {
    return c.redirect('/logout')
  }
  
  // Ë°®Á§∫ÂêçÊõ¥Êñ∞
  users.set(currentUserId, {
    ...currentUser,
    displayName: displayName
  })
  
  // „Éó„É≠„Éï„Ç£„Éº„É´ÁîªÂÉèÂá¶ÁêÜ
  if (profileImage && profileImage.size > 0) {
    if (profileImage.size > 5 * 1024 * 1024) { // 5MBÂà∂Èôê
      return c.redirect('/profile/edit?error=file_too_large')
    }
    
    try {
      // ÁîªÂÉè„ÇíBase64„Å´Â§âÊèõ„Åó„Å¶‰øùÂ≠ò
      const buffer = await profileImage.arrayBuffer()
      const base64 = btoa(String.fromCharCode(...new Uint8Array(buffer)))
      const imageUrl = `data:${profileImage.type};base64,${base64}`
      
      globalData.profileImages.set(currentUserId, imageUrl)
    } catch (error) {
      console.error('Profile image upload error:', error)
      return c.redirect('/profile/edit?error=upload_failed')
    }
  }
  
  return c.redirect(`/profile/${currentUserId}`)
})

// Follow user API
app.post('/api/profile/follow', passwordProtection, async (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const formData = await c.req.formData()
  const targetUserId = formData.get('userId')?.toString()
  
  if (!targetUserId || !users.has(targetUserId)) {
    return c.json({ error: 'User not found' }, 404)
  }
  
  if (currentUserId === targetUserId) {
    return c.json({ error: 'Cannot follow yourself' }, 400)
  }
  
  // „Éñ„É≠„ÉÉ„ÇØ„ÉÅ„Çß„ÉÉ„ÇØ
  const blockedByCurrent = globalData.blockedUsers.get(currentUserId) || new Set()
  const blockedByTarget = globalData.blockedUsers.get(targetUserId) || new Set()
  
  if (blockedByCurrent.has(targetUserId) || blockedByTarget.has(currentUserId)) {
    return c.json({ error: 'Cannot follow blocked user' }, 403)
  }
  
  let followingSet = globalData.followingUsers.get(currentUserId)
  if (!followingSet) {
    followingSet = new Set()
    globalData.followingUsers.set(currentUserId, followingSet)
  }
  
  const isFollowing = followingSet.has(targetUserId)
  
  if (isFollowing) {
    followingSet.delete(targetUserId)
    return c.json({ success: true, following: false, message: '„Éï„Ç£„Éº„Éâ„Åã„ÇâÈô§Â§ñ„Åó„Åæ„Åó„Åü' })
  } else {
    followingSet.add(targetUserId)
    return c.json({ success: true, following: true, message: '„Éï„Ç£„Éº„Éâ„Å´ËøΩÂä†„Åó„Åæ„Åó„Åü' })
  }
})

// Block user API
app.post('/api/profile/block', passwordProtection, async (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const formData = await c.req.formData()
  const targetUserId = formData.get('userId')?.toString()
  
  if (!targetUserId || !users.has(targetUserId)) {
    return c.json({ error: 'User not found' }, 404)
  }
  
  if (currentUserId === targetUserId) {
    return c.json({ error: 'Cannot block yourself' }, 400)
  }
  
  let blockedSet = globalData.blockedUsers.get(currentUserId)
  if (!blockedSet) {
    blockedSet = new Set()
    globalData.blockedUsers.set(currentUserId, blockedSet)
  }
  
  blockedSet.add(targetUserId)
  
  // „Éï„Ç©„É≠„ÉºÈñ¢‰øÇ„ÇÇÂâäÈô§
  const followingSet = globalData.followingUsers.get(currentUserId)
  if (followingSet) {
    followingSet.delete(targetUserId)
  }
  
  return c.json({ success: true, message: '„É¶„Éº„Ç∂„Éº„Çí„Éñ„É≠„ÉÉ„ÇØ„Åó„Åæ„Åó„Åü' })
})

// Get recent posts for profile API
app.get('/api/profile/:userId/posts', passwordProtection, (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const targetUserId = c.req.param('userId')
  
  if (!users.has(targetUserId)) {
    return c.json({ error: 'User not found' }, 404)
  }
  
  // „Éñ„É≠„ÉÉ„ÇØ„ÉÅ„Çß„ÉÉ„ÇØ
  const blockedByCurrent = globalData.blockedUsers.get(currentUserId) || new Set()
  const blockedByTarget = globalData.blockedUsers.get(targetUserId) || new Set()
  
  if (blockedByCurrent.has(targetUserId) || blockedByTarget.has(currentUserId)) {
    return c.json({ error: 'User is blocked' }, 403)
  }
  
  const recentPosts = []
  
  // „Éï„Ç£„Éº„ÉâÊäïÁ®ø
  const feedPosts = globalData.posts.filter(post => post.userid === targetUserId)
    .sort((a, b) => b.timestamp - a.timestamp)
    .slice(0, 5)
    .map(post => ({
      type: 'feed',
      id: post.id,
      content: post.content.substring(0, 100) + (post.content.length > 100 ? '...' : ''),
      timestamp: post.timestamp,
      link: null
    }))
  
  // Êé≤Á§∫ÊùøÊäïÁ®ø
  const boardPosts = []
  for (const [boardId, board] of globalData.boards) {
    const userPosts = board.posts.filter(post => post.userid === targetUserId)
      .map(post => ({
        type: 'board',
        id: post.id,
        content: post.content.substring(0, 100) + (post.content.length > 100 ? '...' : ''),
        timestamp: post.timestamp,
        link: `/board/${boardId}`,
        boardTitle: board.title
      }))
    boardPosts.push(...userPosts)
  }
  
  // „Ç§„Éô„É≥„ÉàÊäïÁ®ø
  const eventPosts = []
  for (const [eventId, event] of globalData.events) {
    if (event.createdBy === targetUserId) {
      eventPosts.push({
        type: 'event',
        id: eventId,
        content: event.title + ' - ' + event.description.substring(0, 80),
        timestamp: new Date(event.createdAt).getTime(),
        link: `/event/${eventId}`,
        eventTitle: event.title
      })
    }
  }
  
  // ÂÖ®ÊäïÁ®ø„Çí„Éû„Éº„Ç∏„Åó„Å¶ÊúÄÊñ∞10‰ª∂„ÇíÂèñÂæó
  const allPosts = [...feedPosts, ...boardPosts, ...eventPosts]
    .sort((a, b) => b.timestamp - a.timestamp)
    .slice(0, 10)
  
  return c.json({ posts: allPosts })
})

// Get blocked users list API
app.get('/api/profile/blocked', passwordProtection, (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const blockedSet = globalData.blockedUsers.get(currentUserId) || new Set()
  
  const blockedUsers = Array.from(blockedSet).map(userId => {
    const user = users.get(userId)
    return user ? {
      userId: userId,
      displayName: user.displayName || user.profile?.displayName || 'Unknown User'
    } : null
  }).filter(user => user !== null)
  
  return c.json({ blockedUsers })
})

// Unblock user API
app.post('/api/profile/unblock', passwordProtection, async (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const formData = await c.req.formData()
  const targetUserId = formData.get('userId')?.toString()
  
  if (!targetUserId) {
    return c.json({ error: 'User ID required' }, 400)
  }
  
  const blockedSet = globalData.blockedUsers.get(currentUserId)
  if (!blockedSet || !blockedSet.has(targetUserId)) {
    return c.json({ error: 'User is not blocked' }, 400)
  }
  
  blockedSet.delete(targetUserId)
  
  return c.json({ success: true, message: '„Éñ„É≠„ÉÉ„ÇØ„ÇíËß£Èô§„Åó„Åæ„Åó„Åü' })
})

// Logout handler
app.get('/logout', (c) => {
  // Clear authentication cookies
  setCookie(c, 'horror_auth', '', {
    maxAge: 0,
    httpOnly: true,
    secure: false
  })
  setCookie(c, 'current_user', '', {
    maxAge: 0,
    httpOnly: true,
    secure: false
  })
  
  return c.redirect('/welcome')
})

// [Êú¨Áï™Áí∞Â¢É„Åß„ÅØÁÑ°ÂäπÂåñ] „Éá„Éê„ÉÉ„Ç∞Áî®„É¶„Éº„Ç∂„ÉºÁÆ°ÁêÜÊ©üËÉΩÔºàÈñãÁô∫Áí∞Â¢É„Åß„ÅÆ„Åø‰ΩøÁî®Ôºâ
// PM2ÂÜçËµ∑ÂãïÂØæÂøú„ÅÆ‰∏ÄÊôÇÁöÑÂØæÂá¶Ê≥ï
// app.get('/debug/users', (c) => {
//   // Á∞°Âçò„Å™Ë™çË®ºÔºàÊú¨Áï™„Åß„ÅØÂâäÈô§Êé®Â•®Ôºâ
//   const debugPassword = c.req.query('debug_key')
//   if (debugPassword !== 'horror_debug_2024') {
//     return c.text('Unauthorized', 401)
//   }
//   
//   const userList = Array.from(users.entries()).map(([userid, userData]) => ({
//     userid,
//     createdAt: userData.createdAt,
//     hasProfile: !!userData.profile,
//     displayName: userData.profile?.displayName || 'Not set'
//   }))
//   
//   return c.json({
//     message: 'Debug user status (PM2 restart safe)',
//     totalUsers: users.size,
//     users: userList,
//     lastInitialized: new Date().toISOString()
//   })
// })

// [Êú¨Áï™Áí∞Â¢É„Åß„ÅØÁÑ°ÂäπÂåñ] „Éá„Éê„ÉÉ„Ç∞Áî®„É¶„Éº„Ç∂„ÉºÂÜçÂàùÊúüÂåñ„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
// app.post('/debug/reinit-users', async (c) => {
//   const debugPassword = c.req.query('debug_key')
//   if (debugPassword !== 'horror_debug_2024') {
//     return c.text('Unauthorized', 401)
//   }
//   
//   // ÂÜçÂàùÊúüÂåñÂÆüË°å
//   initializeDebugUsers()
//   
//   return c.json({
//     message: 'Debug users reinitialized successfully',
//     totalUsers: users.size,
//     timestamp: new Date().toISOString()
//   })
// })

// [Êú¨Áï™Áí∞Â¢É„Åß„ÅØÁÑ°ÂäπÂåñ] Á∑äÊÄ•„Éá„Éº„ÇøÂæ©Êóß„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
// app.post('/debug/emergency-recovery', async (c) => {
//   const debugPassword = c.req.query('debug_key')
//   if (debugPassword !== 'horror_debug_2024') {
//     return c.text('Unauthorized', 401)
//   }
//   
//   console.log(`[RECOVERY] Á∑äÊÄ•„Éá„Éº„ÇøÂæ©Êóß„ÇíÂÆüË°å„Åó„Åæ„Åô`)
//   
//   // ÂÖ®„Éá„Éº„Çø„ÇíÂº∑Âà∂ÂÜçÂàùÊúüÂåñ
//   users.clear()
//   posts.clear()
//   postIdCounter = 1
//   
//   initializeDebugUsers()
//   initializeDebugPosts()
//   
//   return c.json({
//     message: 'Emergency recovery completed successfully',
//     totalUsers: users.size,
//     totalPosts: posts.size,
//     recoveryTime: new Date().toISOString()
//   })
// })

// [Êú¨Áï™Áí∞Â¢É„Åß„ÅØÁÑ°ÂäπÂåñ] „Éá„Éº„ÇøÁä∂ÊÖãÁõ£Ë¶ñ„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
// app.get('/debug/system-status', (c) => {
//   const debugPassword = c.req.query('debug_key')
//   if (debugPassword !== 'horror_debug_2024') {
//     return c.text('Unauthorized', 401)
//   }
//   
//   const usersList = Array.from(users.entries()).map(([userid, userData]) => ({
//     userid,
//     hasProfile: !!userData.profile,
//     displayName: userData.profile?.displayName || 'Not set',
//     hasHorrorPreferences: !!userData.horrorPreferences
//   }))
//   
//   const postsList = Array.from(posts.entries()).map(([postId, postData]) => ({
//     postId,
//     userid: postData.userid,
//     hasContent: !!postData.content,
//     timestamp: postData.timestamp,
//     replyCount: (postData.replies || []).length
//   }))
//   
//   return c.json({
//     systemStatus: 'running',
//     dataIntegrity: {
//       usersCount: users.size,
//       postsCount: posts.size,
//       lastCheck: new Date().toISOString()
//     },
//     users: usersList,
//     posts: postsList,
//     memoryUsage: {
//       usersMapSize: users.size,
//       postsMapSize: posts.size
//     }
//   })
// })

// „Éï„Ç£„Éº„ÉâÊäïÁ®ø‰ΩúÊàêAPI
app.post('/api/posts', passwordProtection, async (c) => {
  const currentUser = getCookie(c, 'current_user')
  if (!currentUser || !users.has(currentUser)) {
    return c.json({ error: 'User not found' }, 401)
  }
  
  const formData = await c.req.formData()
  const content = formData.get('content')?.toString().trim()
  const imageFile = formData.get('image') as File | null
  
  if (!content || content.length === 0) {
    return c.json({ error: 'ÊäïÁ®øÂÜÖÂÆπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ' }, 400)
  }
  
  if (content.length > 500) {
    return c.json({ error: 'ÊäïÁ®ø„ÅØ500ÊñáÂ≠ó‰ª•ÂÜÖ„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ' }, 400)
  }
  
  // ÁîªÂÉèÂá¶ÁêÜÔºàÁ∞°ÊòìÂÆüË£Ö - ÂÆüÈöõ„ÅÆ„Ç¢„Éó„É™„Åß„ÅØCloudflare R2„Å™„Å©„Çí‰ΩøÁî®Ôºâ
  let imageData = null
  if (imageFile && imageFile.size > 0) {
    // „Éï„Ç°„Ç§„É´„Çø„Ç§„Éó„ÉÅ„Çß„ÉÉ„ÇØ
    if (!imageFile.type.startsWith('image/')) {
      return c.json({ error: 'ÁîªÂÉè„Éï„Ç°„Ç§„É´„ÅÆ„Åø„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂèØËÉΩ„Åß„Åô' }, 400)
    }
    
    // „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÉÅ„Çß„ÉÉ„ÇØÔºà5MBÂà∂ÈôêÔºâ 
    if (imageFile.size > 5 * 1024 * 1024) {
      return c.json({ error: 'ÁîªÂÉè„Éï„Ç°„Ç§„É´„ÅØ5MB‰ª•‰∏ã„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ' }, 400)
    }
    
    // ÁîªÂÉè„Éá„Éº„Çø„Çí‰øùÂ≠òÔºàÂÆüÈöõ„ÅÆÊú¨Áï™Áí∞Â¢É„Åß„ÅØÂ§ñÈÉ®„Çπ„Éà„É¨„Éº„Ç∏„Å´‰øùÂ≠òÔºâ
    const arrayBuffer = await imageFile.arrayBuffer()
    const base64 = btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)))
    imageData = {
      type: imageFile.type,
      size: imageFile.size,
      data: base64,
      name: imageFile.name || 'image.jpg'
    }
  }
  
  // Êñ∞„Åó„ÅÑÊäïÁ®ø„Çí‰ΩúÊàê
  const postId = `post_${postIdCounter++}`
  const newPost = {
    id: postId,
    userid: currentUser,
    content: content,
    image: imageData,
    timestamp: Date.now(),
    createdAt: new Date().toISOString(),
    replies: [],
    bookmarkedBy: []
  }
  
  posts.set(postId, newPost)
  
  return c.json({
    success: true,
    post: newPost,
    message: imageData ? 'ÁîªÂÉè‰ªò„Åç„ÅßÊäïÁ®ø„Åó„Åæ„Åó„Åü' : 'ÊäïÁ®ø„Åó„Åæ„Åó„Åü'
  })
})

// „Éï„Ç£„Éº„ÉâÂèñÂæóAPI
app.get('/api/feed', passwordProtection, async (c) => {
  const currentUserCookie = getCookie(c, 'current_user')
  
  if (!currentUserCookie) {
    return c.json({ error: 'User not authenticated' }, 401)
  }
  
  try {
    // „ÇØ„ÉÉ„Ç≠„Éº„Åã„Çâ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
    let currentUser: any = {}
    if (currentUserCookie.startsWith('{')) {
      // JSONÂΩ¢Âºè„ÅÆÂ†¥Âêà
      currentUser = JSON.parse(currentUserCookie)
    } else {
      // ÊñáÂ≠óÂàó„ÅÆÂ†¥ÂêàÔºàÊóßÂΩ¢ÂºèÔºâ
      const userStmt = (c.env as any).DB.prepare('SELECT userid, display_name FROM users WHERE userid = ?')
      const userResult = await userStmt.bind(currentUserCookie).first()
      if (!userResult) {
        return c.json({ error: 'User not found in database' }, 401)
      }
      currentUser = {
        userid: userResult.userid,
        displayName: userResult.display_name
      }
    }
    
    // „Éá„Éº„Çø„Éô„Éº„Çπ„Åã„ÇâÊäïÁ®ø„ÇíÂèñÂæó
    const postsStmt = (c.env as any).DB.prepare(`
      SELECT p.id, p.content, p.author_id, p.image_url, p.created_at,
             u.display_name as author_display_name
      FROM posts p
      LEFT JOIN users u ON p.author_id = u.userid
      ORDER BY p.created_at DESC
      LIMIT 50
    `)
    const postsResult = await postsStmt.all()
    
    if (!postsResult.success) {
      throw new Error('Failed to fetch posts')
    }
  
    // ÊäïÁ®ø„Éá„Éº„Çø„ÇíÂä†Â∑•
    const feedPosts = postsResult.results.map((post: any) => ({
      id: post.id.toString(),
      userid: post.author_id,
      content: post.content,
      timestamp: new Date(post.created_at).getTime(),
      createdAt: post.created_at,
      imageUrl: post.image_url,
      displayName: post.author_display_name || post.author_id,
      isOwnPost: post.author_id === currentUser.userid,
      replies: [], // TODO: Ëøî‰ø°Ê©üËÉΩ„ÇíÂÆüË£Ö„Åô„ÇãÂ†¥Âêà
      bookmarkedBy: [] // TODO: „Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØÊ©üËÉΩ„ÇíÂÆüË£Ö„Åô„ÇãÂ†¥Âêà
    }))
    
    return c.json({
      posts: feedPosts,
      totalPosts: feedPosts.length,
      currentUser: currentUser
    })
    
  } catch (error) {
    console.error('Feed API error:', error)
    return c.json({ error: 'Failed to fetch feed' }, 500)
  }
})

// ÊäïÁ®ø„Å∏„ÅÆËøî‰ø°API
app.post('/api/posts/:postId/replies', passwordProtection, async (c) => {
  const currentUser = getCookie(c, 'current_user')
  if (!currentUser || !users.has(currentUser)) {
    return c.json({ error: 'User not found' }, 401)
  }
  
  const postId = c.req.param('postId')
  if (!posts.has(postId)) {
    return c.json({ error: 'Post not found' }, 404)
  }
  
  const formData = await c.req.formData()
  const content = formData.get('content')?.toString().trim()
  
  if (!content || content.length === 0) {
    return c.json({ error: 'Ëøî‰ø°ÂÜÖÂÆπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ' }, 400)
  }
  
  if (content.length > 300) {
    return c.json({ error: 'Ëøî‰ø°„ÅØ300ÊñáÂ≠ó‰ª•ÂÜÖ„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ' }, 400)
  }
  
  const post = posts.get(postId)
  const reply = {
    id: `reply_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    userid: currentUser,
    content: content,
    timestamp: Date.now(),
    createdAt: new Date().toISOString()
  }
  
  post.replies.push(reply)
  posts.set(postId, post)
  
  const user = users.get(currentUser)
  return c.json({
    success: true,
    reply: {
      ...reply,
      displayName: user?.profile?.displayName || currentUser
    }
  })
})

// „Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØËøΩÂä†/ÂâäÈô§API
app.post('/api/posts/:postId/bookmark', passwordProtection, async (c) => {
  const currentUser = getCookie(c, 'current_user')
  if (!currentUser || !users.has(currentUser)) {
    return c.json({ error: 'User not found' }, 401)
  }
  
  const postId = c.req.param('postId')
  if (!posts.has(postId)) {
    return c.json({ error: 'Post not found' }, 404)
  }
  
  const post = posts.get(postId)
  const bookmarkIndex = post.bookmarkedBy.indexOf(currentUser)
  
  if (bookmarkIndex === -1) {
    // „Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØËøΩÂä†
    post.bookmarkedBy.push(currentUser)
    posts.set(postId, post)
    return c.json({ success: true, bookmarked: true, message: '„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„Å´ËøΩÂä†„Åó„Åæ„Åó„Åü' })
  } else {
    // „Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØÂâäÈô§
    post.bookmarkedBy.splice(bookmarkIndex, 1)
    posts.set(postId, post)
    return c.json({ success: true, bookmarked: false, message: '„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü' })
  }
})

// Êé≤Á§∫ÊùøÊäïÁ®ø„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØËøΩÂä†/ÂâäÈô§API
app.post('/api/boards/:boardId/posts/:postId/bookmark', passwordProtection, async (c) => {
  const currentUser = getCookie(c, 'current_user')
  if (!currentUser || !users.has(currentUser)) {
    return c.json({ error: 'User not found' }, 401)
  }
  
  const boardId = c.req.param('boardId')
  const postId = c.req.param('postId')
  
  if (!globalData.boards.has(boardId)) {
    return c.json({ error: 'Board not found' }, 404)
  }
  
  const board = globalData.boards.get(boardId)
  const post = board.posts.find(p => p.id === postId)
  
  if (!post) {
    return c.json({ error: 'Post not found' }, 404)
  }
  
  // bookmarkedByÈÖçÂàó„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÂàùÊúüÂåñ
  if (!post.bookmarkedBy) {
    post.bookmarkedBy = []
  }
  
  const bookmarkIndex = post.bookmarkedBy.indexOf(currentUser)
  
  if (bookmarkIndex === -1) {
    // „Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØËøΩÂä†
    post.bookmarkedBy.push(currentUser)
    globalData.boards.set(boardId, board)
    return c.json({ success: true, bookmarked: true, message: '„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„Å´ËøΩÂä†„Åó„Åæ„Åó„Åü' })
  } else {
    // „Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØÂâäÈô§
    post.bookmarkedBy.splice(bookmarkIndex, 1)
    globalData.boards.set(boardId, board)
    return c.json({ success: true, bookmarked: false, message: '„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü' })
  }
})

// „Éû„ÉÉ„ÉÅ„É≥„Ç∞Ë®àÁÆó„Ç¢„É´„Ç¥„É™„Ç∫„É†
const calculateMatchPercentage = (user1Profile: any, user2Profile: any) => {
  if (!user1Profile || !user2Profile) return 0
  
  // „Éõ„É©„Éº„Ç∏„É£„É≥„É´„ÅÆ„Éû„ÉÉ„ÉÅ„É≥„Ç∞
  const user1Genres = user1Profile.horrorGenres || []
  const user2Genres = user2Profile.horrorGenres || []
  
  if (user1Genres.length === 0 || user2Genres.length === 0) return 0
  
  // ÂÖ±ÈÄö„Ç∏„É£„É≥„É´Êï∞„ÇíË®àÁÆó
  const commonGenres = user1Genres.filter((genre: string) => user2Genres.includes(genre))
  const totalGenres = new Set([...user1Genres, ...user2Genres]).size
  
  // „Ç∏„É£„É≥„É´„Éû„ÉÉ„ÉÅÁéá (70%„ÅÆÈáç„Åø)
  const genreMatchRate = (commonGenres.length / Math.max(user1Genres.length, user2Genres.length)) * 0.7
  
  // ÁµåÈ®ì„É¨„Éô„É´„Éû„ÉÉ„ÉÅ„É≥„Ç∞ (30%„ÅÆÈáç„Åø)
  let experienceMatchRate = 0
  const exp1 = user1Profile.experience || ''
  const exp2 = user2Profile.experience || ''
  
  if (exp1 === exp2) {
    experienceMatchRate = 0.3 // ÂÆåÂÖ®‰∏ÄËá¥
  } else if ((exp1 === 'ÂàùÂøÉËÄÖ' && exp2 === '‰∏≠Á¥öËÄÖ') || 
             (exp1 === '‰∏≠Á¥öËÄÖ' && exp2 === 'ÂàùÂøÉËÄÖ') ||
             (exp1 === '‰∏≠Á¥öËÄÖ' && exp2 === '‰∏äÁ¥öËÄÖ') ||
             (exp1 === '‰∏äÁ¥öËÄÖ' && exp2 === '‰∏≠Á¥öËÄÖ')) {
    experienceMatchRate = 0.15 // Èö£Êé•„É¨„Éô„É´
  }
  
  return Math.round((genreMatchRate + experienceMatchRate) * 100)
}

// „Éû„ÉÉ„ÉÅ„É≥„Ç∞API
app.get('/api/matches', passwordProtection, (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const currentUser = users.get(currentUserId)
  
  if (!currentUser || !currentUser.profile) {
    return c.json({ matches: [] })
  }
  
  const matches: any[] = []
  const oneMonthAgo = Date.now() - (30 * 24 * 60 * 60 * 1000)
  
  users.forEach((user, userId) => {
    if (userId === currentUserId || !user.profile) return
    
    const matchPercentage = calculateMatchPercentage(currentUser.profile, user.profile)
    
    if (matchPercentage >= 50) {
      const isNew = new Date(user.createdAt).getTime() > oneMonthAgo
      
      matches.push({
        userId,
        displayName: user.displayName || user.profile.displayName || 'Unknown',
        prefecture: user.profile.prefecture || 'Êú™Ë®≠ÂÆö',
        matchPercentage,
        isNew,
        avatar: user.profile.avatar || null
      })
    }
  })
  
  // „Éû„ÉÉ„ÉÅÁéá„ÅÆÈ´ò„ÅÑÈ†Ü„Å´„ÇΩ„Éº„Éà
  matches.sort((a, b) => b.matchPercentage - a.matchPercentage)
  
  return c.json({ matches })
})

// [ÂâäÈô§Ê∏à„Åø] Âè§„ÅÑDMÈÄÅ‰ø°API - /api/dm/send/:userId „Å´Áµ±Âêà

// DM‰∏ÄË¶ßÂèñÂæóAPIÔºà„Éñ„É≠„ÉÉ„ÇØ„ÉªÂâäÈô§Ê©üËÉΩÂØæÂøúÔºâ
app.get('/api/dm/conversations', passwordProtection, (c) => {
  const currentUserId = getCookie(c, 'current_user')
  
  // Êú¨‰∫∫Ë™çË®º„ÉÅ„Çß„ÉÉ„ÇØ
  if (!checkIdentityVerification(currentUserId)) {
    return c.json({ error: 'identity_verification_required', message: 'Êú¨‰∫∫Ë™çË®º„ÅåÂøÖË¶Å„Åß„Åô' })
  }
  
  if (!globalData.dms) {
    return c.json({ conversations: [] })
  }
  
  const conversationMap = new Map()
  const blockedSet = globalData.blockedUsers.get(currentUserId) || new Set()
  const deletedSet = globalData.deletedConversations.get(currentUserId) || new Set()
  
  // MapÂäπÁéáÂåñ: forEach „Çí for...of „Å´Â§âÊõ¥
  for (const [dmId, dm] of globalData.dms) {
    if (dm.senderId === currentUserId || dm.recipientId === currentUserId) {
      const otherUserId = dm.senderId === currentUserId ? dm.recipientId : dm.senderId
      const otherUser = users.get(otherUserId)
      
      // „Éñ„É≠„ÉÉ„ÇØ„Åï„Çå„Åü„É¶„Éº„Ç∂„Éº„Åæ„Åü„ÅØÂâäÈô§„Åï„Çå„Åü„Éà„Éº„ÇØ„ÅØÈô§Â§ñ
      if (blockedSet.has(otherUserId) || deletedSet.has(otherUserId)) {
        continue
      }
      
      if (otherUser) {
        if (!conversationMap.has(otherUserId)) {
          conversationMap.set(otherUserId, {
            userId: otherUserId,
            displayName: otherUser.displayName || otherUser.profile?.displayName || 'Unknown',
            avatar: otherUser.profile?.avatar || null, 
            lastMessage: dm.message,
            lastTimestamp: dm.timestamp,
            unreadCount: 0
          })
        } else {
          const conv = conversationMap.get(otherUserId)
          if (dm.timestamp > conv.lastTimestamp) {
            conv.lastMessage = dm.message
            conv.lastTimestamp = dm.timestamp
          }
        }
        
        // Êú™Ë™≠„Ç´„Ç¶„É≥„Éà
        if (dm.recipientId === currentUserId && !dm.read) {
          conversationMap.get(otherUserId).unreadCount++
        }
      }
    }
  }
  
  const conversations = Array.from(conversationMap.values())
    .sort((a, b) => b.lastTimestamp - a.lastTimestamp)
  
  return c.json({ conversations })
})

// ÂÄãÂà•DM‰ºöË©±ÂèñÂæóAPI
app.get('/api/dm/conversation/:userId', passwordProtection, (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const targetUserId = c.req.param('userId')
  
  // Êú¨‰∫∫Ë™çË®º„ÉÅ„Çß„ÉÉ„ÇØ
  if (!checkIdentityVerification(currentUserId)) {
    return c.json({ error: 'identity_verification_required', message: 'Êú¨‰∫∫Ë™çË®º„ÅåÂøÖË¶Å„Åß„Åô' })
  }
  
  const targetUser = users.get(targetUserId)
  if (!targetUser) {
    return c.json({ error: 'User not found' }, 404)
  }
  
  const blockedSet = globalData.blockedUsers.get(currentUserId) || new Set()
  if (blockedSet.has(targetUserId)) {
    return c.json({ error: 'User is blocked' }, 403)
  }
  
  // ‰ºöË©±„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂèñÂæóÔºàMapÂäπÁéáÂåñÔºâ
  const messages = []
  for (const [dmId, dm] of globalData.dms) {
    if ((dm.senderId === currentUserId && dm.recipientId === targetUserId) ||
        (dm.senderId === targetUserId && dm.recipientId === currentUserId)) {
      messages.push(dm)
      // Êú™Ë™≠„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÊó¢Ë™≠„Å´Â§âÊõ¥ÔºàÂêåÊôÇÂÆüË°å„ÅßÂäπÁéáÂåñÔºâ
      if (dm.senderId === targetUserId && dm.recipientId === currentUserId && !dm.read) {
        dm.read = true
      }
    }
  }
  messages.sort((a: any, b: any) => a.timestamp - b.timestamp)
  
  return c.json({
    user: {
      userId: targetUserId,
      displayName: targetUser.displayName || targetUser.profile?.displayName || 'Unknown',
      avatar: targetUser.profile?.avatar || null
    },
    messages: messages.map((dm: any) => ({
      id: dm.id,
      senderId: dm.senderId,
      message: dm.message,
      timestamp: dm.timestamp,
      read: dm.read
    }))
  })
})

// DMÈÄÅ‰ø°APIÔºàÊú¨‰∫∫Ë™çË®ºÂØæÂøúÔºâ
app.post('/api/dm/send/:userId', passwordProtection, async (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const recipientId = c.req.param('userId')
  
  // Êú¨‰∫∫Ë™çË®º„ÉÅ„Çß„ÉÉ„ÇØ
  if (!checkIdentityVerification(currentUserId)) {
    return c.json({ success: false, error: 'identity_verification_required', message: 'Êú¨‰∫∫Ë™çË®º„ÅåÂøÖË¶Å„Åß„Åô' })
  }
  
  const formData = await c.req.formData()
  const message = formData.get('message')?.toString().trim()
  
  if (!message || !users.has(recipientId)) {
    return c.json({ success: false, error: 'Invalid recipient or message' })
  }
  
  const blockedSet = globalData.blockedUsers.get(currentUserId) || new Set()
  if (blockedSet.has(recipientId)) {
    return c.json({ success: false, error: 'User is blocked' })
  }
  
  // Áõ∏Êâã„Å´„Éñ„É≠„ÉÉ„ÇØ„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Åã„ÉÅ„Çß„ÉÉ„ÇØ
  const recipientBlockedSet = globalData.blockedUsers.get(recipientId) || new Set()
  if (recipientBlockedSet.has(currentUserId)) {
    return c.json({ success: false, error: 'You are blocked by this user' })
  }
  
  if (!globalData.dms) globalData.dms = []
  
  const dmId = `dm_${Date.now()}_${Math.random().toString(36).substring(7)}`
  const dm = {
    id: dmId,
    senderId: currentUserId,
    recipientId,
    message,
    timestamp: Date.now(),
    read: false
  }
  
  globalData.dms.set(dmId, dm)
  
  return c.json({ success: true, dmId })
})

// „Éà„Éº„ÇØÂâäÈô§API
app.delete('/api/dm/conversation/:userId', passwordProtection, (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const targetUserId = c.req.param('userId')
  
  if (!globalData.deletedConversations.has(currentUserId)) {
    globalData.deletedConversations.set(currentUserId, new Set())
  }
  
  globalData.deletedConversations.get(currentUserId).add(targetUserId)
  
  return c.json({ success: true, message: '„Éà„Éº„ÇØ„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü' })
})

// „Éñ„É≠„ÉÉ„ÇØÊ©üËÉΩAPI
app.post('/api/dm/block/:userId', passwordProtection, (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const targetUserId = c.req.param('userId')
  
  if (!users.has(targetUserId)) {
    return c.json({ success: false, error: 'User not found' }, 404)
  }
  
  if (!globalData.blockedUsers.has(currentUserId)) {
    globalData.blockedUsers.set(currentUserId, new Set())
  }
  
  globalData.blockedUsers.get(currentUserId).add(targetUserId)
  
  return c.json({ success: true, message: '„É¶„Éº„Ç∂„Éº„Çí„Éñ„É≠„ÉÉ„ÇØ„Åó„Åæ„Åó„Åü' })
})

// „Éñ„É≠„ÉÉ„ÇØËß£Èô§API
app.delete('/api/dm/block/:userId', passwordProtection, (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const targetUserId = c.req.param('userId')
  
  const blockedSet = globalData.blockedUsers.get(currentUserId)
  if (blockedSet) {
    blockedSet.delete(targetUserId)
  }
  
  return c.json({ success: true, message: '„Éñ„É≠„ÉÉ„ÇØ„ÇíËß£Èô§„Åó„Åæ„Åó„Åü' })
})

// „Éó„É≠„Éï„Ç£„Éº„É´ÂèñÂæóAPI
app.get('/api/profile/:userId', passwordProtection, (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const targetUserId = c.req.param('userId')
  
  const targetUser = users.get(targetUserId)
  if (!targetUser || !targetUser.profile) {
    return c.json({ error: 'User not found' }, 404)
  }
  
  const blockedSet = globalData.blockedUsers.get(currentUserId) || new Set()
  if (blockedSet.has(targetUserId)) {
    return c.json({ error: 'User is blocked' }, 403)
  }
  
  // Êú¨‰∫∫Ë™çË®ºÁä∂ÊÖã„ÉÅ„Çß„ÉÉ„ÇØ
  const verification = globalData.identityVerifications.get(targetUserId)
  const isVerified = verification && verification.status === 'approved'
  
  // „Éó„É≠„Éï„Ç£„Éº„É´ÊÉÖÂ†±Ôºà„Éó„É©„Ç§„Éô„Éº„ÉàÊÉÖÂ†±„ÅØÈô§Â§ñÔºâ
  const profileData = {
    userId: targetUserId,
    displayName: targetUser.displayName || targetUser.profile.displayName,
    prefecture: targetUser.profile.prefecture,
    selfIntroduction: targetUser.profile.selfIntroduction || '',
    avatar: targetUser.profile.avatar || null,
    isVerified: isVerified,
    // „Éõ„É©„ÉºÂ•Ω„ÅøÊÉÖÂ†±Ôºà‰∏ÄÈÉ®ÂÖ¨ÈñãÔºâ
    horrorPreferences: targetUser.horrorPreferences ? {
      mediaTypes: targetUser.horrorPreferences.mediaTypes || [],
      genreTypes: targetUser.horrorPreferences.genreTypes || []
    } : null
  }
  
  return c.json({ profile: profileData })
})

// Êé≤Á§∫Êùø‰∏ÄË¶ßÂèñÂæóAPI
app.get('/api/boards', passwordProtection, (c) => {
  const boards = Array.from(globalData.boards.values()).map(board => ({
    id: board.id,
    title: board.title,
    postCount: board.posts.length,
    createdAt: board.createdAt
  })).sort((a, b) => b.createdAt - a.createdAt)
  
  return c.json({ boards })
})

// Êé≤Á§∫Êùø‰ΩúÊàêAPI
app.post('/api/boards', passwordProtection, async (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const currentUser = users.get(currentUserId)
  
  if (!currentUser) {
    return c.json({ success: false, error: 'User not found' }, 401)
  }
  
  const formData = await c.req.formData()
  const title = formData.get('title')?.toString().trim()
  const content = formData.get('content')?.toString().trim()
  const imageFile = formData.get('image') as File | null
  
  if (!title || !content) {
    return c.json({ success: false, error: '„Çø„Ç§„Éà„É´„Å®ÂÜÖÂÆπ„ÅØÂøÖÈ†à„Åß„Åô' })
  }
  
  const boardId = `board_${Date.now()}_${Math.random().toString(36).substring(7)}`
  
  // ÁîªÂÉèÂá¶ÁêÜÔºàÊó¢Â≠ò„ÅÆ„É≠„Ç∏„ÉÉ„ÇØ„ÇíÊµÅÁî®Ôºâ
  let imageData = null
  if (imageFile && imageFile.size > 0) {
    try {
      const arrayBuffer = await imageFile.arrayBuffer()
      const base64Data = Buffer.from(arrayBuffer).toString('base64')
      imageData = {
        type: imageFile.type,
        data: base64Data,
        size: imageFile.size
      }
    } catch (error) {
      console.error('ÁîªÂÉèÂá¶ÁêÜ„Ç®„É©„Éº:', error)
    }
  }
  
  // ÂàùÊúüÊäïÁ®ø
  const initialPost = {
    id: `post_${Date.now()}_${Math.random().toString(36).substring(7)}`,
    userId: currentUserId,
    displayName: currentUser.displayName || currentUser.profile?.displayName || currentUserId,
    content,
    image: imageData,
    timestamp: Date.now(),
    createdAt: new Date().toISOString()
  }
  
  // Êé≤Á§∫Êùø‰ΩúÊàê
  const board = {
    id: boardId,
    title,
    creatorId: currentUserId,
    creatorName: currentUser.displayName || currentUser.profile?.displayName || currentUserId,
    posts: [initialPost],
    createdAt: Date.now()
  }
  
  globalData.boards.set(boardId, board)
  
  return c.json({ success: true, board: { id: boardId, title, postCount: 1 } })
})

// ÂÄãÂà•Êé≤Á§∫ÊùøÂèñÂæóAPI
app.get('/api/boards/:boardId', passwordProtection, (c) => {
  const boardId = c.req.param('boardId')
  const board = globalData.boards.get(boardId)
  
  if (!board) {
    return c.json({ error: 'Board not found' }, 404)
  }
  
  return c.json({ board })
})

// Êé≤Á§∫ÊùøÊäïÁ®øAPI
app.post('/api/boards/:boardId/posts', passwordProtection, async (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const currentUser = users.get(currentUserId)
  const boardId = c.req.param('boardId')
  
  if (!currentUser) {
    return c.json({ success: false, error: 'User not found' }, 401)
  }
  
  const board = globalData.boards.get(boardId)
  if (!board) {
    return c.json({ success: false, error: 'Board not found' }, 404)
  }
  
  const formData = await c.req.formData()
  const content = formData.get('content')?.toString().trim()
  const imageFile = formData.get('image') as File | null
  
  if (!content) {
    return c.json({ success: false, error: 'ÊäïÁ®øÂÜÖÂÆπ„ÅØÂøÖÈ†à„Åß„Åô' })
  }
  
  // ÁîªÂÉèÂá¶ÁêÜ
  let imageData = null
  if (imageFile && imageFile.size > 0) {
    try {
      const arrayBuffer = await imageFile.arrayBuffer()
      const base64Data = Buffer.from(arrayBuffer).toString('base64')
      imageData = {
        type: imageFile.type,
        data: base64Data,
        size: imageFile.size
      }
    } catch (error) {
      console.error('ÁîªÂÉèÂá¶ÁêÜ„Ç®„É©„Éº:', error)
    }
  }
  
  const newPost = {
    id: `post_${Date.now()}_${Math.random().toString(36).substring(7)}`,
    userId: currentUserId,
    displayName: currentUser.displayName || currentUser.profile?.displayName || currentUserId,
    content,
    image: imageData,
    timestamp: Date.now(),
    createdAt: new Date().toISOString(),
    bookmarkedBy: [] // „Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØÊ©üËÉΩËøΩÂä†
  }
  
  board.posts.push(newPost)
  globalData.boards.set(boardId, board)
  
  return c.json({ success: true, post: newPost })
})

// Êú¨‰∫∫Ë™çË®º„ÉÅ„Çß„ÉÉ„ÇØÈñ¢Êï∞
const checkIdentityVerification = (userId: string) => {
  const user = users.get(userId)
  return user && user.identityVerified === true
}

// Êú¨‰∫∫Ë™çË®ºÁî≥Ë´ãAPI
app.post('/api/identity-verification', passwordProtection, async (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const currentUser = users.get(currentUserId)
  
  if (!currentUser) {
    return c.json({ success: false, error: 'User not found' }, 401)
  }
  
  const formData = await c.req.formData()
  const documentImage = formData.get('document') as File | null
  
  if (!documentImage || documentImage.size === 0) {
    return c.json({ success: false, error: 'Êú¨‰∫∫Á¢∫Ë™çÊõ∏È°û„ÅÆÁîªÂÉè„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ' })
  }
  
  // ÁîªÂÉèÂá¶ÁêÜ
  try {
    const arrayBuffer = await documentImage.arrayBuffer()
    const base64Data = Buffer.from(arrayBuffer).toString('base64')
    
    const verificationId = `verification_${Date.now()}_${Math.random().toString(36).substring(7)}`
    
    // Êú¨‰∫∫Ë™çË®º„Éá„Éº„Çø„Çí‰øùÂ≠ò
    globalData.identityVerifications.set(verificationId, {
      id: verificationId,
      userId: currentUserId,
      documentImage: {
        type: documentImage.type,
        data: base64Data,
        size: documentImage.size,
        name: documentImage.name
      },
      status: 'pending', // pending, approved, rejected
      submittedAt: Date.now(),
      submittedAtISO: new Date().toISOString()
    })
    
    // „É¶„Éº„Ç∂„Éº„Å´Áî≥Ë´ã‰∏≠„Éï„É©„Ç∞„ÇíË®≠ÂÆö
    currentUser.identityVerificationStatus = 'pending'
    users.set(currentUserId, currentUser)
    
    return c.json({ success: true, verificationId, message: 'Êú¨‰∫∫Ë™çË®ºÁî≥Ë´ã„ÇíÂèó„Åë‰ªò„Åë„Åæ„Åó„Åü„ÄÇÂØ©Êüª„Å´„ÅäÊôÇÈñì„Çí„ÅÑ„Åü„Å†„ÅèÂ†¥Âêà„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ' })
  } catch (error) {
    console.error('Êú¨‰∫∫Ë™çË®ºÁî≥Ë´ã„Ç®„É©„Éº:', error)
    return c.json({ success: false, error: 'ÁîªÂÉè„ÅÆÂá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü' })
  }
})

// Êú¨‰∫∫Ë™çË®ºÁä∂ÊÖãÁ¢∫Ë™çAPI
app.get('/api/identity-verification/status', passwordProtection, (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const currentUser = users.get(currentUserId)
  
  if (!currentUser) {
    return c.json({ error: 'User not found' }, 401)
  }
  
  return c.json({
    verified: currentUser.identityVerified === true,
    status: currentUser.identityVerificationStatus || 'none' // none, pending, approved, rejected
  })
})

// „Ç§„Éô„É≥„Éà‰∏ÄË¶ßÂèñÂæóAPI
app.get('/api/events', passwordProtection, (c) => {
  const currentTime = Date.now()
  
  // ÈÅéÂéª„ÅÆ„Ç§„Éô„É≥„Éà„ÇíÂâäÈô§ÔºàÁµÇ‰∫Ü„Åó„Åü„Ç§„Éô„É≥„Éà„ÅØ„É°„É¢„É™ÁØÄÁ¥Ñ„ÅÆ„Åü„ÇÅÂâäÈô§Ôºâ
  for (const [eventId, event] of globalData.events.entries()) {
    const eventDate = new Date(event.eventDate).getTime()
    const oneDayAfterEvent = eventDate + (24 * 60 * 60 * 1000) // „Ç§„Éô„É≥„ÉàÊó•„Åã„Çâ24ÊôÇÈñìÂæå
    
    if (currentTime > oneDayAfterEvent) {
      globalData.events.delete(eventId)
    }
  }
  
  const events = Array.from(globalData.events.values())
    .sort((a, b) => b.createdAt - a.createdAt) // Êñ∞„Åó„ÅÑÈ†Ü
  
  return c.json({ events })
})

// „Ç§„Éô„É≥„Éà‰ΩúÊàêAPI
app.post('/api/events', passwordProtection, async (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const currentUser = users.get(currentUserId)
  
  if (!currentUser) {
    return c.json({ success: false, error: 'User not found' }, 401)
  }
  
  // Êú¨‰∫∫Ë™çË®º„ÉÅ„Çß„ÉÉ„ÇØ
  if (!checkIdentityVerification(currentUserId)) {
    return c.json({ success: false, error: 'identity_verification_required', message: 'Êú¨‰∫∫Ë™çË®º„ÅåÂøÖË¶Å„Åß„Åô' })
  }
  
  const formData = await c.req.formData()
  const eventDate = formData.get('eventDate')?.toString()
  const content = formData.get('content')?.toString().trim()
  const capacity = parseInt(formData.get('capacity')?.toString() || '0')
  const referenceLink = formData.get('referenceLink')?.toString().trim() || ''
  
  if (!eventDate || !content || !capacity || capacity < 1) {
    return c.json({ success: false, error: '„Åô„Åπ„Å¶„ÅÆÈ†ÖÁõÆ„ÇíÊ≠£„Åó„ÅèÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ' })
  }
  
  // „Ç§„Éô„É≥„ÉàÊó•„ÅÆÂ¶•ÂΩìÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
  const eventDateTime = new Date(eventDate).getTime()
  const now = Date.now()
  
  if (eventDateTime <= now) {
    return c.json({ success: false, error: 'ÈÅéÂéª„ÅÆÊó•‰ªò„ÅØ„Ç§„Éô„É≥„ÉàÊó•„Å®„Åó„Å¶Ë®≠ÂÆö„Åß„Åç„Åæ„Åõ„Çì' })
  }
  
  const eventId = `event_${Date.now()}_${Math.random().toString(36).substring(7)}`
  
  const newEvent = {
    id: eventId,
    creatorId: currentUserId,
    creatorName: currentUser.displayName || currentUser.profile?.displayName || currentUserId,
    eventDate,
    content,
    capacity,
    referenceLink: referenceLink || null, // ÂèÇËÄÉ„É™„É≥„ÇØÔºà‰ªªÊÑèÔºâ
    participants: [currentUserId], // ‰ΩúÊàêËÄÖ„ÅØËá™ÂãïÂèÇÂä†
    isClosed: false,
    createdAt: Date.now(),
    createdAtISO: new Date().toISOString(),
    bookmarkedBy: [] // „Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØÊ©üËÉΩËøΩÂä†
  }
  
  globalData.events.set(eventId, newEvent)
  
  return c.json({ success: true, event: newEvent })
})

// „Ç§„Éô„É≥„ÉàÂãüÈõÜÁµÇ‰∫ÜAPI
app.post('/api/events/:eventId/close', passwordProtection, (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const eventId = c.req.param('eventId')
  const event = globalData.events.get(eventId)
  
  if (!event) {
    return c.json({ success: false, error: '„Ç§„Éô„É≥„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì' }, 404)
  }
  
  if (event.creatorId !== currentUserId) {
    return c.json({ success: false, error: '„Ç§„Éô„É≥„Éà‰ΩúÊàêËÄÖ„ÅÆ„Åø„ÅåÂãüÈõÜÁµÇ‰∫Ü„Åß„Åç„Åæ„Åô' }, 403)
  }
  
  event.isClosed = true
  globalData.events.set(eventId, event)
  
  return c.json({ success: true, message: '„Ç§„Éô„É≥„Éà„ÅÆÂãüÈõÜ„ÇíÁµÇ‰∫Ü„Åó„Åæ„Åó„Åü' })
})

// „Ç§„Éô„É≥„ÉàÂèÇÂä†API
app.post('/api/events/:eventId/join', passwordProtection, (c) => {
  const currentUserId = getCookie(c, 'current_user')
  const eventId = c.req.param('eventId')
  const event = globalData.events.get(eventId)
  
  if (!event) {
    return c.json({ success: false, error: '„Ç§„Éô„É≥„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì' }, 404)
  }
  
  // Êú¨‰∫∫Ë™çË®º„ÉÅ„Çß„ÉÉ„ÇØ
  if (!checkIdentityVerification(currentUserId)) {
    return c.json({ success: false, error: 'identity_verification_required', message: 'Êú¨‰∫∫Ë™çË®º„ÅåÂøÖË¶Å„Åß„Åô' })
  }
  
  if (event.isClosed) {
    return c.json({ success: false, error: '„Åì„ÅÆ„Ç§„Éô„É≥„Éà„ÅØÂãüÈõÜ„ÇíÁµÇ‰∫Ü„Åó„Å¶„ÅÑ„Åæ„Åô' })
  }
  
  if (event.participants.includes(currentUserId)) {
    return c.json({ success: false, error: '„Åô„Åß„Å´ÂèÇÂä†Ê∏à„Åø„Åß„Åô' })
  }
  
  if (event.participants.length >= event.capacity) {
    return c.json({ success: false, error: 'ÂÆöÂì°„Å´ÈÅî„Åó„Å¶„ÅÑ„Åæ„Åô' })
  }
  
  event.participants.push(currentUserId)
  globalData.events.set(eventId, event)
  
  return c.json({ success: true, message: '„Ç§„Éô„É≥„Éà„Å´ÂèÇÂä†„Åó„Åæ„Åó„Åü' })
})

// „Ç§„Éô„É≥„Éà„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØËøΩÂä†/ÂâäÈô§API
app.post('/api/events/:eventId/bookmark', passwordProtection, async (c) => {
  const currentUser = getCookie(c, 'current_user')
  if (!currentUser || !users.has(currentUser)) {
    return c.json({ error: 'User not found' }, 401)
  }
  
  const eventId = c.req.param('eventId')
  
  if (!globalData.events.has(eventId)) {
    return c.json({ error: 'Event not found' }, 404)
  }
  
  const event = globalData.events.get(eventId)
  
  // bookmarkedByÈÖçÂàó„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÂàùÊúüÂåñ
  if (!event.bookmarkedBy) {
    event.bookmarkedBy = []
  }
  
  const bookmarkIndex = event.bookmarkedBy.indexOf(currentUser)
  
  if (bookmarkIndex === -1) {
    // „Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØËøΩÂä†
    event.bookmarkedBy.push(currentUser)
    globalData.events.set(eventId, event)
    return c.json({ success: true, bookmarked: true, message: '„Ç§„Éô„É≥„Éà„Çí„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„Å´ËøΩÂä†„Åó„Åæ„Åó„Åü' })
  } else {
    // „Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØÂâäÈô§
    event.bookmarkedBy.splice(bookmarkIndex, 1)
    globalData.events.set(eventId, event)
    return c.json({ success: true, bookmarked: false, message: '„Ç§„Éô„É≥„Éà„ÅÆ„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü' })
  }
})

// „Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØÁµ±Âêà‰∏ÄË¶ßÂèñÂæóAPI
app.get('/api/bookmarks', passwordProtection, (c) => {
  const currentUser = getCookie(c, 'current_user')
  if (!currentUser || !users.has(currentUser)) {
    return c.json({ error: 'User not found' }, 401)
  }

  const bookmarks = []

  // „Éï„Ç£„Éº„ÉâÊäïÁ®ø„ÅÆ„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ
  for (const post of posts.values()) {
    if (post.bookmarkedBy && post.bookmarkedBy.includes(currentUser)) {
      bookmarks.push({
        id: `feed_${post.id}`,
        type: 'feed',
        originalId: post.id,
        title: post.content.substring(0, 50) + (post.content.length > 50 ? '...' : ''),
        author: post.displayName,
        timestamp: post.timestamp,
        image: post.image,
        content: post.content,
        originalData: post
      })
    }
  }

  // „Ç§„Éô„É≥„Éà„ÅÆ„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ
  for (const event of globalData.events.values()) {
    if (event.bookmarkedBy && event.bookmarkedBy.includes(currentUser)) {
      const eventDate = new Date(event.eventDate)
      bookmarks.push({
        id: `event_${event.id}`,
        type: 'event',
        originalId: event.id,
        title: event.content.substring(0, 50) + (event.content.length > 50 ? '...' : ''),
        author: event.creatorName,
        timestamp: event.createdAt,
        eventDate: event.eventDate,
        capacity: event.capacity,
        participants: event.participants.length,
        isClosed: event.isClosed,
        content: event.content,
        referenceLink: event.referenceLink,
        originalData: event
      })
    }
  }

  // Êé≤Á§∫ÊùøÊäïÁ®ø„ÅÆ„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ
  for (const board of globalData.boards.values()) {
    for (const post of board.posts) {
      if (post.bookmarkedBy && post.bookmarkedBy.includes(currentUser)) {
        bookmarks.push({
          id: `board_${board.id}_${post.id}`,
          type: 'board',
          originalId: post.id,
          boardId: board.id,
          boardTitle: board.title,
          title: post.content.substring(0, 50) + (post.content.length > 50 ? '...' : ''),
          author: post.displayName,
          timestamp: post.timestamp,
          image: post.image,
          content: post.content,
          originalData: post
        })
      }
    }
  }

  // ÊôÇÁ≥ªÂàó„Åß„ÇΩ„Éº„ÉàÔºàÊñ∞„Åó„ÅÑÈ†ÜÔºâ
  bookmarks.sort((a, b) => b.timestamp - a.timestamp)

  return c.json({ bookmarks })
})

export default app
